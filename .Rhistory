1,
0
)
)
dat.glad.coping %>%
freq(covid_symptoms, cumul = F)
# linear model of covid symptoms
dat.glad.coping <- dat.glad.coping %>%
mutate(
covid_probability =
(-1.32) -
(0.01*Age) +
(0.44*Sex_respiratory) +
(1.75*respiratory.anosmia_binary) +
(0.31*respiratory.pcough_binary) +
(0.49*respiratory.fatigue_binary) +
(0.39*respiratory.skipped_meals_binary)
)
# Calcualte the odds ratios
dat.glad.coping <- dat.glad.coping %>%
mutate(
covid_odds_ratio =
(exp(covid_probability) / (1 + exp(covid_probability)))
)
# generate binary cutt off variable for risk of COVID
dat.glad.coping <- dat.glad.coping %>%
mutate(
covid_odds_ratio_50_numeric =
case_when(
covid_odds_ratio >= 0 & covid_odds_ratio < 0.5 ~ "0", #cut off at 0.5
covid_odds_ratio >= 0.5 & covid_odds_ratio <= 1 ~ "1"
)
)
#create factor with labels
dat.glad.coping <- dat.glad.coping %>%
mutate(
covid_odds_ratio_50 =
recode_factor(
covid_odds_ratio_50_numeric,
"0" = "No COVID",
"1" = "Probable COVID"
)
)
#frequency table for covid variables
covid_variables <- c("covid_odds_ratio",
"covid_probability"
)
descr(x = dat.glad.coping[,covid_variables],
round.digits = 2,
transpose = TRUE)
## looking at cases over 0.5
freq(dat.glad.coping$covid_odds_ratio_50,
cumul = FALSE)
coping.glad.respiratory.raw.id <- coping.glad.respiratory.raw %>%
drop_na(externalDataReference) %>% # Drop NAs
distinct(externalDataReference, .keep_all = TRUE) %>% # Remove duplicates based on ID
separate(externalDataReference, into = c("Sample", "ID"), sep = 4) %>% # Split ID in Sample and Number
mutate(ID = as.numeric(ID),
startDate.glad = startDate) %>% # Rename startDate
select(
Sample, # Sample
ID, # ID
respiratory.breath_diarrhoea_fatigue_fever,
respiratory.worst_ill_feel,
respiratory.persistent_cough,
respiratory.skipping_meals_because_you_felt_unwell,
respiratory.was_your_sense_of_smell_impaired,
respiratory.was_your_sense_of_taste_impaired,
respiratory.feeling_tiredfatigued,
respiratory.throat_swab_coronavirus_nose,
respiratory.throat_swab_test_nose,
respiratory.coronavirus_antibody_test,
respiratory.results_antibody_test
) %>%
add_numeric(., exclude = exclude_cols) %>%
mutate_if(is.numeric, ~na_if(., -88)) %>% # Recode missing values to NAs in numeric variables
mutate_if(is.numeric, ~na_if(., -99)) %>%
mutate_if(is.numeric, ~na_if(., -77)) %>%
mutate_if(is.factor, ~na_if(., "Seen but not answered")) %>% # Recode missing values to NAs in factor variables
mutate_if(is.factor, ~na_if(., "Don't know")) %>%
mutate_if(is.factor, ~na_if(., "Prefer not to say")) %>%
mutate_if(is.factor, ~na_if(., "Prefer not to answer")) %>%
mutate_if(is.factor, ~forcats::fct_drop(., only = "Seen but not answered")) %>% # Drop empty factor levels
mutate_if(is.factor, ~forcats::fct_drop(., only = "Don't know")) %>%
mutate_if(is.factor, ~forcats::fct_drop(., only = "Prefer not to answer")) %>%
mutate_if(is.factor, ~forcats::fct_drop(., only = "Prefer not to say"))
# Inspect dimensions
dim(coping.glad.respiratory.raw.id)
# Inspect colnames
colnames(coping.glad.respiratory.raw.id)
#Differences
dim(coping.glad.respiratory.raw)[1]-dim(coping.glad.respiratory.raw.id)[1]
dat.glad.coping <- dat.glad.coping %>%
mutate(
covid_probable_case_incl_screening_numeric =
case_when(
respiratory.breath_diarrhoea_fatigue_fever_numeric == 0 ~ 0,
covid_odds_ratio_50_numeric == 1 ~ 0,
covid_odds_ratio_50_numeric == 1 ~ 1
)
)
#create factor with labels
dat.glad.coping <- dat.glad.coping %>%
mutate(
covid_probable_case_incl_screening =
recode_factor(
covid_probable_case_incl_screening_numeric,
"0" = "No COVID",
"1" = "Probable COVID"
)
)
dat.glad.coping <- dat.glad.coping %>%
mutate(
covid_probable_case_incl_screening_numeric =
case_when(
respiratory.breath_diarrhoea_fatigue_fever_numeric == 0 ~ 0,
covid_odds_ratio_50_numeric == 1 ~ 0,
covid_odds_ratio_50_numeric == 1 ~ 1
)
)
#create factor with labels
dat.glad.coping <- dat.glad.coping %>%
mutate(
covid_probable_case_incl_screening =
recode_factor(
covid_probable_case_incl_screening_numeric,
"0" = "No COVID",
"1" = "Probable COVID"
)
)
dat.glad.coping %>%
freq($covid_odds_ratio_50,
dat.glad.coping <- dat.glad.coping %>%
mutate(
covid_probable_case_incl_screening_numeric =
case_when(
respiratory.breath_diarrhoea_fatigue_fever_numeric == 0 ~ 0,
covid_odds_ratio_50_numeric == 1 ~ 0,
covid_odds_ratio_50_numeric == 1 ~ 1
)
)
#create factor with labels
dat.glad.coping <- dat.glad.coping %>%
mutate(
covid_probable_case_incl_screening =
recode_factor(
covid_probable_case_incl_screening_numeric,
"0" = "No COVID",
"1" = "Probable COVID"
)
)
dat.glad.coping %>%
freq(covid_odds_ratio_50,
cumul = FALSE)
# linear model of covid symptoms
dat.glad.coping <- dat.glad.coping %>%
mutate(
covid_probability =
(-1.32) -
(0.01*Age) +
(0.44*Sex_respiratory) +
(1.75*respiratory.anosmia_binary) +
(0.31*respiratory.pcough_binary) +
(0.49*respiratory.fatigue_binary) +
(0.39*respiratory.skipped_meals_binary)
)
# Calcualte the odds ratios
dat.glad.coping <- dat.glad.coping %>%
mutate(
covid_odds_ratio =
(exp(covid_probability) / (1 + exp(covid_probability)))
)
# generate binary cutt off variable for risk of COVID
dat.glad.coping <- dat.glad.coping %>%
mutate(
covid_odds_ratio_50_numeric =
case_when(
covid_odds_ratio >= 0 & covid_odds_ratio < 0.5 ~ "0", #cut off at 0.5
covid_odds_ratio >= 0.5 & covid_odds_ratio <= 1 ~ "1"
)
)
#create factor with labels
dat.glad.coping <- dat.glad.coping %>%
mutate(
covid_odds_ratio_50 =
recode_factor(
covid_odds_ratio_50_numeric,
"0" = "No COVID",
"1" = "Probable COVID"
)
)
#frequency table for covid variables
covid_variables <- c("covid_odds_ratio",
"covid_probability"
)
descr(x = dat.glad.coping[,covid_variables],
round.digits = 2,
transpose = TRUE)
## looking at cases over 0.5
freq(dat.glad.coping$covid_odds_ratio_50,
cumul = FALSE)
freq(dat.glad.coping$respiratory.breath_diarrhoea_fatigue_fever_numeric)
dat.glad.coping <- dat.glad.coping %>%
mutate(
covid_probable_case_incl_screening_numeric =
case_when(
respiratory.breath_diarrhoea_fatigue_fever_numeric == 0 ~ 0,
covid_odds_ratio_50_numeric == 0 ~ 0,
covid_odds_ratio_50_numeric == 1 ~ 1
)
)
#create factor with labels
dat.glad.coping <- dat.glad.coping %>%
mutate(
covid_probable_case_incl_screening =
recode_factor(
covid_probable_case_incl_screening_numeric,
"0" = "No COVID",
"1" = "Probable COVID"
)
)
dat.glad.coping %>%
freq(covid_odds_ratio_50,
cumul = FALSE)
dat.glad.coping <- dat.glad.coping %>%
mutate(
covid_probable_case_incl_screening_numeric =
case_when(
covid_odds_ratio_50_numeric == 1 ~ 1
covid_odds_ratio_50_numeric == 0 ~ 0,
dat.glad.coping <- dat.glad.coping %>%
mutate(
covid_probable_case_incl_screening_numeric =
case_when(
respiratory.breath_diarrhoea_fatigue_fever_numeric == 0 ~ 0,
covid_odds_ratio_50_numeric == 0 ~ 0,
covid_odds_ratio_50_numeric == 1 ~ 1
)
)
#create factor with labels
dat.glad.coping <- dat.glad.coping %>%
mutate(
covid_probable_case_incl_screening =
recode_factor(
covid_probable_case_incl_screening_numeric,
"0" = "No COVID",
"1" = "Probable COVID"
)
)
dat.glad.coping %>%
freq(covid_probable_case_incl_screening,
cumul = FALSE)
knitr::opts_chunk$set(echo = FALSE,
comment=NA,
prompt=FALSE,
cache=FALSE)
options(bitmapType = 'quartz') # to render fonts better
remove(list = ls())
date = Sys.Date()
GLAD = TRUE
EDGI = FALSE
NBR = FALSE
RAMP = FALSE
#install.packages("summarytools")
#install.packages("tidyverse")
#install.packages("psych")
#install.packages("dplyr")
library(knitr)
library(summarytools)
library(psych)
library(dplyr)
library(tidyverse)
COPINGpalette2 <- c("#78D9C5",
"#F5BE5E")
COPINGpalette3 <- c("#78D9C5",
"#F5BE5E",
"#EEB6E9")
COPINGpalette4 <- c("#78D9C5",
"#F5BE5E",
"#EEB6E9",
"#DBDB73")
COPINGpalette5 <- c("#78D9C5",
"#F5BE5E",
"#EEB6E9",
"#DBDB73",
"#FFED98")
COPINGpalette6 <- c("#78D9C5",
"#F5BE5E",
"#EEB6E9",
"#DBDB73",
"#FFED98",
"#BFD2EB")
COPINGpalette7 <- c("#78D9C5",
"#F5BE5E",
"#EEB6E9",
"#DBDB73",
"#FFED98",
"#BFD2EB",
"#808080")
COPINGpaletteGRAD <- c("#F5BE5E",
"#FFD284",
"#FFEED1",
"#B5B5B5",
"#DEFFF8",
"#94F6E1",
"#78D9C5")
COPINGNeuCenterpalette <- c("#78D9C5",
"#808080",
"#F5BE5E")
RAMPworseGRADpalette <- c("#78D9C5",
"#FFEED1",
"#F5BE5E",
"#FFB1B5")
GLADpalette = c("#efc00b",
"#b7dee8")
palette = COPINGpalette2
add_numeric <- function(dat, exclude = NULL) {
dat_fct <- sjlabelled::as_label(dat)
dat <- dat[!colnames(dat) %in% exclude]
colnames(dat) <- paste(colnames(dat), "numeric", sep = "_")
return(bind_cols(dat_fct, dat))
}
#source raw data directory: data.raw_path
source("../PANCHANGE_raw_path.R")
glad.dem.raw <- readRDS(file = paste0(data.raw_path, "/glad/dem_glad.rds"))
dim(glad.dem.raw)
colnames(glad.dem.raw)
exclude_cols_dem <- c("ID",
"Sample",
"startDate.glad",
"Age_uncleaned",
"EduYrs")
glad.dem.raw.id <- glad.dem.raw %>%
drop_na(externalDataReference) %>% # Drop NAs
distinct(externalDataReference, .keep_all = TRUE) %>% # Remove duplicates based on ID
separate(externalDataReference, into = c("Sample", "ID"), sep = 4) %>% # Split ID in Sample and Number
mutate(ID = as.numeric(ID),
startDate.glad = startDate) %>% # Rename startDate
select(
Sample, # Sample
ID, # ID
startDate.glad, #Date when participant signed up to glad
Age_uncleaned = demographics.how_old_are_you_now.txt, # Age
Gender = demographics.which_gender_do_you_identify_with, # Gender
Sex = demographics.select_questionnaire_items_medical, #Sex
EduYrs = demographics.school_education_school_years.txt, # Years in education
demographics.college_or_university_degree, # level of education - univeristy
demographics.a_levelsas_levels_or_equivalent, # level of education - alevel
demographics.o_levelsgcses_or_equivalent, # level of education - gcse
demographics.cses_or_equivalent, # level of education - cse
demographics.nvq_or_hnd_or_hnc_or_equivalent, # level of education - nvq
Ethnicity = demographics.questions_based_ethnic_origin # Ethnicity
) %>%
add_numeric(., exclude = exclude_cols_dem) %>%
mutate_if(is.numeric, ~na_if(., -88)) %>% # Recode missing values to NAs in numeric variables
mutate_if(is.numeric, ~na_if(., -99)) %>%
mutate_if(is.numeric, ~na_if(., -77)) %>%
mutate_if(is.factor, ~na_if(., "Seen but not answered")) %>% # Recode missing values to NAs in factor variables
mutate_if(is.factor, ~na_if(., "Don't know")) %>%
mutate_if(is.factor, ~na_if(., "Prefer not to say")) %>%
mutate_if(is.factor, ~na_if(., "Prefer not to answer")) %>%
mutate_if(is.factor, ~forcats::fct_drop(., only = "Seen but not answered")) %>% # Drop empty factor levels
mutate_if(is.factor, ~forcats::fct_drop(., only = "Don't know")) %>%
mutate_if(is.factor, ~forcats::fct_drop(., only = "Prefer not to answer")) %>%
mutate_if(is.factor, ~forcats::fct_drop(., only = "Prefer not to say"))
# Inspect dimensions
dim(glad.dem.raw.id)
# Inspect colnames
colnames(glad.dem.raw.id)
#Differences
dim(glad.dem.raw)[1]-dim(glad.dem.raw.id)[1]
# define age limits
age_upper_limit = 117 # oldest person in the world is 117 years
age_lower_limit = 16
# identify number of outliers
length(
which(
glad.dem.raw.id$Age_uncleaned > age_upper_limit |
glad.dem.raw.id$Age_uncleaned < age_lower_limit
)
)
# remove age outliers
glad.dem.raw.id <- glad.dem.raw.id %>%
mutate(
Age =
if_else(
Age_uncleaned > age_upper_limit |
Age_uncleaned < age_lower_limit,
true = NA_real_,
false = Age_uncleaned,
missing = NA_real_
)
)
# Inspect colnames
colnames(glad.dem.raw.id)
if(GLAD == TRUE | EDGI == TRUE | NBR == TRUE ) {
# Create categorical age groups per 10 years
glad.dem.raw.id <- glad.dem.raw.id %>%
mutate(
age_category_numeric =
case_when(
Age >= 16 & Age <= 18 ~ "1",
Age >= 19 & Age <= 25 ~ "2",
Age >= 26 & Age <= 35 ~ "3",
Age >= 36 & Age <= 45 ~ "4",
Age >= 46 & Age <= 55 ~ "5",
Age >= 56 & Age <= 65 ~ "6",
Age >= 66 & Age <= 70 ~ "7",
Age >= 71 & Age <= 75 ~ "8",
Age >= 76 & Age <= 80 ~ "9",
Age >= 81 & Age <= 85 ~ "10",
Age >= 86 & Age <= 90 ~ "11",
Age >= 91 & Age <= 100 ~ "12",
Age >= 101 & Age <= 120 ~ "13" # oldest person in the world is 117 years
)
)
glad.dem.raw.id <- glad.dem.raw.id %>%
mutate(
age_category =
recode_factor(
age_category_numeric,
"1" = "16 to 18 years",
"2" = "19 to 25 years",
"3" = "26 to 35 years",
"4" = "36 to 45 years",
"5" = "46 to 55 years",
"6" = "56 to 65 years",
"7" = "66 to 70 years",
"8" = "71 to 75 years",
"9" = "76 to 80 years",
"10" = "81 to 85 years",
"11" = "86 to 90 years",
"12" = "91 to 100 years",
"13" = "Above 100 years"
)
)
glad.dem.raw.id %>%
freq(age_category)
}
#create numeric version of the highest education variable
glad.dem.raw.id <- glad.dem.raw.id %>%
mutate(
highest_education_numeric =
case_when(
demographics.college_or_university_degree_numeric == "1" ~ 4,
demographics.a_levelsas_levels_or_equivalent_numeric == "1" ~ 3,
demographics.nvq_or_hnd_or_hnc_or_equivalent_numeric == "1" ~ 2,
demographics.o_levelsgcses_or_equivalent_numeric == "1" ~ 1,
demographics.cses_or_equivalent_numeric == "1" ~ 1)
)
#recode the numeric version into a factor
glad.dem.raw.id <- glad.dem.raw.id %>%
mutate(
highest_education =
recode_factor(
highest_education_numeric,
`1` = "GCSE/CSE",
`2` = "NVQ",
`3` = "A-levels",
`4` = "University")
)
glad.dem.raw.id %>%
freq(highest_education)
glad.dem.raw.id %>%
select(highest_education,
demographics.college_or_university_degree_numeric,
demographics.a_levelsas_levels_or_equivalent_numeric,
demographics.nvq_or_hnd_or_hnc_or_equivalent_numeric,
demographics.o_levelsgcses_or_equivalent_numeric,
demographics.cses_or_equivalent_numeric
)
head(glad.dem.raw.id)
summarytools::dfSummary(
glad.dem.raw.id,
graph.col = F,
valid.col = F,
labels.col = F)
nbr.cohort <- readxl::read_xlsx(
path = paste0(data.raw_path, "/nbr/coping_participants_export_20200730.xlsx")
)
dim(glad.dem.raw)colnames(glad.dem.raw)
nbr.cohort <- readxl::read_xlsx(
path = paste0(data.raw_path, "/nbr/coping_participants_export_20200730.xlsx")
)
dim(nbr.cohort)
colnames(nbr.cohort)
summarytools::dfSummary(
nbr.cohort,
graph.col = F,
valid.col = F,
labels.col = F)
if(NBR == TRUE) {
summarytools::dfSummary(
nbr.cohort,
graph.col = F,
valid.col = F,
labels.col = T)
}
if(NBR == TRUE) {
summarytools::dfSummary(
nbr.cohort,
graph.col = F,
valid.col = F,
labels.col = T)
}
if(NBR == TRUE) {
summarytools::dfSummary(
nbr.cohort,
graph.col = F,
valid.col = F,
labels.col = F)
}
