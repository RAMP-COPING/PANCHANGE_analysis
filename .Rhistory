)
spread(key = Sample, value = n) %>%
mutate(
EDGI = as.integer(replace_na(EDGI, 0)),
GLAD = as.integer(replace_na(GLAD, 0)),
NBR = as.integer(replace_na(NBR, 0)),
RAMP = as.integer(replace_na(RAMP, 0))
)
spread(key = Sample, value = n) %>%
mutate(
EDGI = as.integer(replace_na(EDGI, 0)),
GLAD = as.integer(replace_na(GLAD, 0)),
NBR = as.integer(replace_na(NBR, 0)),
RAMP = as.integer(replace_na(RAMP, 0))
)
highest_education_per_Sample_count_cross_table <- dat %>%
count(highest_education, Sample) %>%
drop_na
spread(key = Sample, value = n) %>%
mutate(
EDGI = as.integer(replace_na(EDGI, 0)),
GLAD = as.integer(replace_na(GLAD, 0)),
NBR = as.integer(replace_na(NBR, 0)),
RAMP = as.integer(replace_na(RAMP, 0))
)
highest_education_per_Sample_count_cross_table <- dat %>%
count(highest_education, Sample) %>%
drop_na() %>%
spread(key = Sample, value = n) %>%
mutate(
EDGI = as.integer(replace_na(EDGI, 0)),
GLAD = as.integer(replace_na(GLAD, 0)),
NBR = as.integer(replace_na(NBR, 0)),
RAMP = as.integer(replace_na(RAMP, 0))
)
kable(highest_education_per_Sample_count_cross_table)
highest_education_per_Sample_count_cross_table
highest_education_per_Sample_count_cross_table <- dat %>%
count(highest_education, Sample) %>%
drop_na() %>%
spread(key = Sample, value = n) %>%
mutate(
EDGI = as.integer(replace_na(EDGI, 0)),
GLAD = as.integer(replace_na(GLAD, 0)),
NBR = as.integer(replace_na(NBR, 0)),
RAMP = as.integer(replace_na(RAMP, 0))
)
kable(highest_education_per_Sample_count_cross_table)
highest_education_per_Sample_count_cross_table
highest_education_per_Sample_prop_Sample_cross_table <- dat %>%
group_by(Sample) %>%
count(highest_education, Sample) %>%
mutate(Prop = round(n/sum(n), 2)) %>%
pivot_wider(names_from = Sample, values_from = c(n, Prop))
kable(highest_education_per_Sample_prop_Sample_cross_table)
highest_education_per_Sample_prop_Sample_cross_table
highest_education_per_Sample_prop_Sample_cross_table <- dat %>%
group_by(Sample) %>%
count(highest_education, Sample) %>%
drop_na() %>%
mutate(Prop = round(n/sum(n), 2)) %>%
pivot_wider(names_from = Sample, values_from = c(n, Prop))
highest_education_per_Sample_prop_Sample_cross_table <- dat %>%
group_by(Sample) %>%
count(highest_education, Sample) %>%
drop_na() %>%
mutate(Prop = round(n/sum(n), 2)) %>%
pivot_wider(names_from = Sample, values_from = c(n, Prop))
kable(highest_education_per_Sample_prop_Sample_cross_table)
highest_education_per_Sample_prop_Sample_cross_table
highest_education_per_Sample_prop_Sample <- dat %>%
group_by(Sample) %>%
count(highest_education, Sample) %>%
drop_na() %>%
mutate(Prop = round(n/sum(n), 2))
highest_education_per_Sample_prop_Sample <- dat %>%
group_by(Sample) %>%
count(highest_education, Sample) %>%
drop_na() %>%
mutate(Prop = round(n/sum(n), 2))
kable(highest_education_per_Sample_prop_Sample)
highest_education_per_Sample_prop_Sample
highest_education_per_Sample_prop_total <- dat %>%
count(highest_education, Sample) %>%
drop_na() %>%
mutate(Prop = round(n/sum(n), 2))
kable(highest_education_per_Sample_prop_total)
highest_education_per_Sample_prop_total
highest_education_prop_total <- dat %>%
count(highest_education) %>%
mutate(freq = round(n/sum(n), 2)) %>%
drop_na()
kable(highest_education_prop_total)
highest_education_prop_total
# total responders
eduN <- sum(highest_education_prop_total$n)
edubindat <- dat %>%
mutate(demographics.education_binary =
case_when(
highest_education_numeric == "4" ~ "Bachelors or higher",
highest_education_numeric == "3" ~ "A-levels or lower",
highest_education_numeric == "2" ~ "A-levels or lower",
highest_education_numeric == "1" ~ "A-levels or lower"
)) %>%
count(demographics.education_binary) %>%
mutate(freq = round(n/sum(n), 2)) %>%
drop_na()
educatdat <- dat %>%
mutate(demographics.education_three =
case_when(
highest_education_numeric == "4" ~ "Bachelors or higher",
highest_education_numeric == "3" ~ "A-levels",
highest_education_numeric == "1" ~ "GCSEs or lower"
)) %>%
count(demographics.education_three) %>%
mutate(freq = round(n/sum(n), 2)) %>%
drop_na()
edu_pie_alllabel <-
highest_education_prop_total %>%
mutate(demographics.highest_level_of_education = fct_reorder(highest_education,-n)) %>%
ggplot(aes(x="", y=freq, fill=demographics.highest_level_of_education)) +
geom_bar(width = 1, stat = "identity") +
scale_fill_manual(values =  COPINGpalette7) +
scale_color_manual(values =  COPINGpalette7) +
coord_polar("y",start=0) +
theme_void() +
labs(title = paste("RAMP/COPING sample self reported level of education",
sep=" "),
subtitle = paste("n", sum(highest_education_prop_total$n),
sep = " "),
fill = "Self reported level of education")  +
geom_text(aes(y = c(0.13,0.04,0.3,0.65),
x = c(1.2,1.2,1.2,1.2), #GCSE, NVQ, A-levels, university
label= paste0(round((freq*100),0),"%")),
size=5,
face="bold"
)
edu_pie_alllabel
edu_pie_binlabel <-
edubindat %>%
mutate(demographics.education_binary = fct_reorder(demographics.education_binary,-n)) %>%
ggplot(aes(x="", y=freq, fill=demographics.education_binary)) +
geom_bar(width = 1, stat = "identity") +
scale_fill_manual(values =  COPINGpalette7) +
scale_color_manual(values =  COPINGpalette7) +
coord_polar("y",start=0) +
theme_void() +
labs(title = paste("RAMP/COPING sample self reported highest level of education, above or below bachelor degree or equivalent",
sep=" "),
subtitle = paste("n", sum(edubindat$n),
sep = " "),
fill = "Self reported level of education")  +
geom_text(aes(y = c(0.25,0.75),
label= paste0(round((freq*100),0),"%")),
size=5,
face="bold"
)
edu_pie_binlabel
edu_pie_catlabel <-
educatdat %>%
mutate(demographics.education_three = fct_reorder(demographics.education_three,-n)) %>%
ggplot(aes(x="", y=freq, fill=demographics.education_three)) +
geom_bar(width = 1, stat = "identity") +
scale_fill_manual(values =  COPINGpalette7) +
scale_color_manual(values =  COPINGpalette7) +
coord_polar("y",start=0) +
theme_void() +
labs(title = paste("RAMP/COPING sample self reported highest level of education, above or below bachelor degree or equivalent",
sep=" "),
subtitle = paste("n", sum(educatdat$n),
sep = " "),
fill = "Self reported level of education")  +
geom_text(aes(y = c(0.23,0.65,0.05),
label= c(paste0(round((freq[1:3]*100),0),"%")),
size=5,
face="bold"
))
edu_pie_catlabel
edu_pie_nolabel <-
highest_education_prop_total %>%
mutate(demographics.highest_level_of_education = fct_reorder(highest_education,-n)) %>%
ggplot(aes(x="", y=freq, fill=demographics.highest_level_of_education)) +
geom_bar(width = 1, stat = "identity") +
scale_fill_manual(values =  COPINGpalette7) +
scale_color_manual(values =  COPINGpalette7) +
coord_polar("y",start=0) +
theme_void() +
labs(title = paste("RAMP/COPING sample self reported level of education",
sep=" "),
subtitle = paste("n =", sum(highest_education_prop_total$n),
sep = " "),
fill = "Self reported level of education")
edu_pie_nolabel
remove(list = ls())
knitr::opts_chunk$set(echo = FALSE,
comment=NA,
prompt=FALSE,
cache=FALSE)
options(bitmapType = 'quartz') # to render fonts better
remove(list = ls())
date = Sys.Date()
#install.packages("summarytools")
#install.packages("tidyverse")
#install.packages("psych")
#install.packages("broom")
#install.packages("skimr")
#install.packages("polycor")
#install.packages("corrplot")
#install.packages("patchwork")
#instlal.packages("ggpubr")
library(knitr)
library(summarytools)
library(psych)
library(polycor)
library(corrplot)
library(patchwork)
library(broom)
library(tidyverse)
library(ggpubr)
library(stringr)
COPINGpalette2 <- c("#78D9C5",
"#F5BE5E")
COPINGpalette3 <- c("#78D9C5",
"#F5BE5E",
"#EEB6E9")
COPINGpalette4 <- c("#78D9C5",
"#F5BE5E",
"#EEB6E9",
"#DBDB73")
COPINGpalette5 <- c("#78D9C5",
"#F5BE5E",
"#EEB6E9",
"#DBDB73",
"#FFED98")
COPINGpalette6 <- c("#78D9C5",
"#F5BE5E",
"#EEB6E9",
"#DBDB73",
"#FFED98",
"#BFD2EB")
COPINGpalette7 <- c("#78D9C5",
"#F5BE5E",
"#EEB6E9",
"#DBDB73",
"#FFED98",
"#BFD2EB",
"#808080")
COPINGpaletteGRAD <- c("#F5BE5E",
"#FFD284",
"#FFEED1",
"#B5B5B5",
"#DEFFF8",
"#94F6E1",
"#78D9C5")
COPINGNeuCenterpalette <- c("#78D9C5",
"#808080",
"#F5BE5E")
RAMPworseGRADpalette <- c("#78D9C5",
"#FFEED1",
"#F5BE5E",
"#FFB1B5")
GLADpalette = c("#efc00b",
"#b7dee8")
palette = COPINGpalette2
theme_personal <-  theme(
text = element_text(color = "black"),
axis.title = element_text(color = "black"),
axis.text = element_text(color = "black"),
axis.title.y = element_blank(),
legend.background = element_blank(),
legend.box.background = element_blank(),
panel.background = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_line(
colour = "gray",
linetype = "dashed",
size = 0.2
),
axis.ticks = element_blank()
)
#source data directory: data_path
source("../PANCHANGE_raw_path.R")
dat.raw <- readRDS(file = paste0(data_path, "four_cohorts_variables.rds"))
dim(dat.raw)
colnames(dat.raw)
sum_score_cols <- dat.raw %>%
select(contains("sum_score")) %>%
select(-ends_with("raw")) %>%
colnames()
sum_score_cols
phq.sum_score_cols <- dat.raw %>%
select(contains("phq")) %>%
select(contains("sum_score")) %>%
select(-ends_with("raw")) %>%
select(-contains("8items")) %>%
colnames()
phq.sum_score_cols
gad.sum_score_cols <- dat.raw %>%
select(contains("gad")) %>%
select(contains("sum_score")) %>%
select(-ends_with("raw")) %>%
colnames()
gad.sum_score_cols
ocir.sum_score_cols <- dat.raw %>%
select(contains("ocir")) %>%
select(contains("sum_score")) %>%
select(-ends_with("raw")) %>%
colnames()
ocir.sum_score_cols
pcl.sum_score_cols <- dat.raw %>%
select(contains("pcl")) %>%
select(contains("sum_score")) %>%
select(-ends_with("raw")) %>%
colnames()
pcl.sum_score_cols
diff_score_cols <- dat.raw %>%
select(contains("diff_score")) %>%
colnames()
diff_score_cols
phq.diff_score_cols <- dat.raw %>%
select(contains("phq")) %>%
select(contains("diff_score")) %>%
colnames()
phq.diff_score_cols
gad.diff_score_cols <- dat.raw %>%
select(contains("gad")) %>%
select(contains("diff_score")) %>%
colnames()
gad.diff_score_cols
ocir.diff_score_cols <- dat.raw %>%
select(contains("ocir")) %>%
select(contains("diff_score")) %>%
colnames()
ocir.diff_score_cols
dat <- dat.raw %>%
filter( # Participants should have responded to the mental health diagnosis (MHD) questionnaire
!is.na(depressive_disorders) &
!is.na(anxiety_disorders) &
!is.na(eating_disorders) &
!is.na(obsessive_compulsive_disorders) &
!is.na(psychotic_disorders) &
!is.na(mhd.mania_hypomania_bipolar_or_manicdepression) &
!is.na(mhd.posttraumatic_stress_disorder_ptsd) &
!is.na(autism_spectrum_disorder) &
!is.na(mhd.attention_deficit_hyperactivity_disorder) &
!is.na(mhd.personality_disorder) &
!is.na(control)
) %>%
filter(
!is.na(data_group_gad) & # Participants should have answered at least the GAD, the PHQ, or the PCL once
!is.na(data_group_phq) &
!is.na(data_group_pcl)
) %>%
drop_na(startDate.coping) %>% # Participant has answered the COPING/RAMP baseline questionnaire
drop_na(Gender_collapsed) %>% # Participant has self-reported their gender
drop_na(age_category_collapsed) # Participant has self-reported their age
dim(dat.raw)
dim(dat)
nrow(dat.raw)-nrow(dat)
dat.raw %>%
freq(
data_group_gad,
cumul = F)
dat.raw %>%
freq(
data_group_phq,
cumul = F)
dat.raw %>%
freq(
data_group_pcl,
cumul = F)
dat.raw %>%
freq(
data_group_ocir,
cumul = F)
dat %>%
freq(Sample)
dat %>%
freq(disorders_total_count)
#Ppts with least one psychiatric disorder
dat %>%
count(disorders_total_count >= 1)
#Ppts with anxiety OR depressive disorder
dat %>%
count(anxiety_disorders_numeric == 1 | depressive_disorders == 1)
#Ppts with anxiety & depression
dat %>%
count(depression_and_anxiety_numeric == 1)
head(dat$gad.sum_score_base, 30)
head(dat$gad.sum_score_retro, 30)
impute_dat <- dat %>%
mutate(gad.sum_score_retro =
if_else(is.na(dat$gad.sum_score_retro), dat$gad.sum_score_base, dat$gad.sum_score_retro))
head(impute_dat$gad.sum_score_base, 30)
head(impute_dat$gad.sum_score_retro, 30)
head(dat$phq.sum_score_base, 30)
head(dat$phq.sum_score_retro, 30)
impute_dat <- dat %>%
mutate(phq.sum_score_retro =
if_else(is.na(dat$phq.sum_score_retro), dat$phq.sum_score_base, dat$phq.sum_score_retro))
head(impute_dat$phq.sum_score_base, 30)
head(impute_dat$phq.sum_score_retro, 30)
head(dat$ocir.sum_score_base, 40)
head(dat$ocir.sum_score_retro, 40)
impute_dat <- dat %>%
mutate(ocir.sum_score_retro =
if_else(is.na(dat$ocir.sum_score_retro), dat$ocir.sum_score_base,                                     dat$ocir.sum_score_retro))
head(impute_dat$ocir.sum_score_base, 40)
head(impute_dat$ocir.sum_score_retro, 40)
head(dat$pcl.sum_score_base, 30)
head(dat$pcl.sum_score_retro, 30)
impute_dat <- dat %>%
mutate(pcl.sum_score_retro =
if_else(is.na(dat$pcl.sum_score_retro), dat$pcl.sum_score_base, dat$pcl.sum_score_retro))
head(impute_dat$pcl.sum_score_base, 30)
head(impute_dat$pcl.sum_score_retro, 30)
head(dat$startDate.coping, 20)
april_sign_up <- dat[str_detect(dat$startDate.coping, "-04-"), ] %>%
select(startDate.coping) %>%
summarise(April = n())
may_sign_up <- dat[str_detect(dat$startDate.coping, "-05-"), ] %>%
select(startDate.coping) %>%
summarise(May = n())
june_sign_up <- dat[str_detect(dat$startDate.coping, "-06-"), ] %>%
select(startDate.coping) %>%
summarise(June = n())
july_sign_up <- dat[str_detect(dat$startDate.coping, "-07-"), ] %>%
select(startDate.coping) %>%
summarise(July = n())
august_sign_up <- dat[str_detect(dat$startDate.coping, "-08-"), ] %>%
select(startDate.coping) %>%
summarise(August = n())
september_sign_up <- dat[str_detect(dat$startDate.coping, "-09-"), ] %>%
select(startDate.coping) %>%
summarise(September = n())
coping_sign_up <- april_sign_up %>%
cbind(may_sign_up, june_sign_up, july_sign_up, august_sign_up, september_sign_up)
april_sign_up %>%
cbind(may_sign_up, june_sign_up, july_sign_up, august_sign_up, september_sign_up)
#Gather the variables
coping_sign_up <- coping_sign_up %>%
gather(key = "month", value = "sign_up_number")
coping_sign_up %>%
gather(key = "month", value = "sign_up_number")
#Proportion calculation
coping_sign_up <- coping_sign_up %>%
mutate(percentage =
round((sign_up_number / sum(sign_up_number) * 100), 2))
coping_sign_up
# Select items for correlation matrix
prepan_retro_items <- c(
"gad.sum_score_prepan",
"gad.sum_score_retro",
"pcl.sum_score_prepan",
"pcl.sum_score_retro",
"ocir.sum_score_prepan",
"ocir.sum_score_retro",
"phq.sum_score_prepan",
"phq.sum_score_retro"
)
#Create a data set with only the COPING samples
prepan_retro_dat <- dat[str_detect(dat$Sample, "NBR|GLAD|EDGI"), ]
#Check that RAMP has been removed
prepan_retro_dat %>%
freq(Sample)
# Calculate correlation matrix on specific columns (variables) from your data frame
prepan_retro.corr.mat <- hetcor(
as.data.frame(prepan_retro_dat[,prepan_retro_items]), # Specify the data
use = "pairwise.complete.obs" # Use all pairwise observations
)
# Print the correlation matrix
print(prepan_retro.corr.mat, digits = max(3, getOption("digits") - 3))
corrplot(prepan_retro.corr.matrix,
method = "color", # objects to represent the correlations on plot
type = "lower", # only use the lower triangle of the matrix
diag = FALSE, # do not show the correlations on the diagonal
addgrid.col = NA,
addCoef.col = "black", # colour for the correlation coefficients in the plot
tl.cex = 0.8,
tl.col = "black",
col=colorRampPalette(c("dodgerblue4","white","firebrick4"))(200), # colours for correlations
# Combine with significance
p.mat = prepan_retro.p.matrix, # Matrix with p values
sig.level = 0.01, # Choose significant level
insig = "blank" # Nonsignificant correlations have no colour
)
# Save the correlations from the correlation matrix in an object
prepan_retro.corr.matrix <- as.matrix(prepan_retro.corr.mat)
# Save the p values from the correlation matrix in an object
prepan_retro.p.matrix <- as.matrix(prepan_retro.corr.mat$tests)
corrplot(prepan_retro.corr.matrix,
method = "color", # objects to represent the correlations on plot
type = "lower", # only use the lower triangle of the matrix
diag = FALSE, # do not show the correlations on the diagonal
addgrid.col = NA,
addCoef.col = "black", # colour for the correlation coefficients in the plot
tl.cex = 0.8,
tl.col = "black",
col=colorRampPalette(c("dodgerblue4","white","firebrick4"))(200), # colours for correlations
# Combine with significance
p.mat = prepan_retro.p.matrix, # Matrix with p values
sig.level = 0.01, # Choose significant level
insig = "blank" # Nonsignificant correlations have no colour
)
knitr::opts_chunk$set(echo = TRUE)
remove(list = ls())
#Sourcing data paths for raw data (data_path) and clean data (data_path_clean)
#Sourcing data files for 1) saliva_kits 2) coping_glad 3) demographic datasets
#Mac source code
source(file = "../flare_data_path.R")
#May need a different source code path for PC computers
#source(file = "..\\flare_data_path.R")
