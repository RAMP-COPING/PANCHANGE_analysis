# Save the correlations from the correlation matrix in an object
prepan_retro.corr.matrix <- as.matrix(prepan_retro.corr.mat)
# Save the p values from the correlation matrix in an object
prepan_retro.p.matrix <- as.matrix(prepan_retro.corr.mat$tests)
res1 <- cor.ci(prepan_retro.corr.matrix)[[1]]
conf <- paste0("[", format(res1[[1]], digits=2), " : ", format(res1[[3]], digits=2), "]")
conf
res1
xs <- row(res1)
ys <- (ncol(res1)+1) - col(res1)
xs[lower.tri(xs,diag=FALSE)] <- 0
ys[lower.tri(ys,diag=FALSE)] <- 0
xs
ys
#Paste conf into the correlation matrix
corrplot(prepan_retro.corr.matrix,
method = "color", # objects to represent the correlations on plot
type = "lower", # only use the lower triangle of the matrix
diag = FALSE, # do not show the correlations on the diagonal
addgrid.col = NA,
addCoef.col = "black", # colour for the correlation coefficients in the plot
tl.cex = 0.8,
tl.col = "black",
col=colorRampPalette(c("dodgerblue4","white","firebrick4"))(200), # colours for correlations
# Combine with significance
p.mat = prepan_retro.p.matrix, # Matrix with p values
sig.level = 0.01, # Choose significant level
insig = "blank" # Nonsignificant correlations have no colour
)
text(xs, ys, conf, pos=1, cex=1)
corrplot(prepan_retro.corr.matrix,
method = "color", # objects to represent the correlations on plot
type = "lower", # only use the lower triangle of the matrix
diag = FALSE, # do not show the correlations on the diagonal
addgrid.col = NA,
addCoef.col = "black", # colour for the correlation coefficients in the plot
tl.cex = 0.8,
tl.col = "black",
col=colorRampPalette(c("dodgerblue4","white","firebrick4"))(200), # colours for correlations
# Combine with significance
p.mat = prepan_retro.p.matrix, # Matrix with p values
sig.level = 0.01, # Choose significant level
insig = "blank" # Nonsignificant correlations have no colour
)
text(xs, ys, conf, pos=1, cex=0.8)
conf <- paste0("[", format(res1[[1]], digits=2), ":", format(res1[[3]], digits=2), "]")
conf
xs
ys
conf
corrplot(prepan_retro.corr.matrix,
method = "color", # objects to represent the correlations on plot
type = "lower", # only use the lower triangle of the matrix
diag = FALSE, # do not show the correlations on the diagonal
addgrid.col = NA,
addCoef.col = "black", # colour for the correlation coefficients in the plot
tl.cex = 0.8,
tl.col = "black",
col=colorRampPalette(c("dodgerblue4","white","firebrick4"))(200), # colours for correlations
# Combine with significance
p.mat = prepan_retro.p.matrix, # Matrix with p values
sig.level = 0.01, # Choose significant level
insig = "blank" # Nonsignificant correlations have no colour
)
text(xs, ys, conf, pos=1, cex=0.8)
res1 <- cor.ci(prepan_retro.corr.matrix)
conf <- paste0("[", format(res1[[1]], digits=2), ":", format(res1[[3]], digits=2), "]")
conf
conf <- paste0("[", format(res1[[2]], digits=2), ":", format(res1[[3]], digits=2), "]")
conf
cor.mtest <- function(mat, conf.level = 0.95){
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- lowCI.mat <- uppCI.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
diag(lowCI.mat) <- diag(uppCI.mat) <- 1
for(i in 1:(n-1)){
for(j in (i+1):n){
tmp <- cor.test(mat[,i], mat[,j], conf.level = conf.level)
p.mat[i,j] <- p.mat[j,i] <- tmp$p.value
lowCI.mat[i,j] <- lowCI.mat[j,i] <- tmp$conf.int[1]
uppCI.mat[i,j] <- uppCI.mat[j,i] <- tmp$conf.int[2]
}
}
return(list(p.mat, lowCI.mat, uppCI.mat))
}
res1 <- cor.mtest(as.data.frame(prepan_retro_dat[,prepan_retro_items]))
res1
conf <- paste0("[", format(res1[[2]], digits=2), ":", format(res1[[3]], digits=2), "]")
conf
# Select items for correlation matrix
prepan_retro_items <- c(
"gad.sum_score_prepan",
"gad.sum_score_retro",
"phq.sum_score_prepan",
"phq.sum_score_retro"
)
#Create a data set with only the GLAD and EDGI
prepan_retro_dat <- dat[str_detect(dat$Sample, "GLAD|EDGI"), ]
#Check that RAMP and NBR has been removed
prepan_retro_dat %>%
freq(Sample)
# Calculate correlation matrix on specific columns (variables) from your data frame
prepan_retro.corr.mat <- hetcor(
as.data.frame(prepan_retro_dat[,prepan_retro_items]), # Specify the data
use = "pairwise.complete.obs" # Use all pairwise observations
)
# Print the correlation matrix
print(prepan_retro.corr.mat, digits = max(3, getOption("digits") - 3))
# Save the correlations from the correlation matrix in an object
prepan_retro.corr.matrix <- as.matrix(prepan_retro.corr.mat)
# Save the p values from the correlation matrix in an object
prepan_retro.p.matrix <- as.matrix(prepan_retro.corr.mat$tests)
res1 <- cor.ci(prepan_retro.corr.matrix)[[1]]
res1 <- cor.mtest(as.data.frame(prepan_retro_dat[,prepan_retro_items]))
conf <- paste0("[", format(res1[[2]], digits=2), ":", format(res1[[3]], digits=2), "]")
conf
res1
xs <- row(res1)
# Select items for correlation matrix
prepan_retro_items <- c(
"gad.sum_score_prepan",
"gad.sum_score_retro",
"phq.sum_score_prepan",
"phq.sum_score_retro"
)
#Create a data set with only the GLAD and EDGI
prepan_retro_dat <- dat[str_detect(dat$Sample, "GLAD|EDGI"), ]
#Check that RAMP and NBR has been removed
prepan_retro_dat %>%
freq(Sample)
# Calculate correlation matrix on specific columns (variables) from your data frame
prepan_retro.corr.mat <- hetcor(
as.data.frame(prepan_retro_dat[,prepan_retro_items]), # Specify the data
use = "pairwise.complete.obs" # Use all pairwise observations
)
# Print the correlation matrix
print(prepan_retro.corr.mat, digits = max(3, getOption("digits") - 3))
# Save the correlations from the correlation matrix in an object
prepan_retro.corr.matrix <- as.matrix(prepan_retro.corr.mat)
# Save the p values from the correlation matrix in an object
prepan_retro.p.matrix <- as.matrix(prepan_retro.corr.mat$tests)
res1 <- cor.ci(prepan_retro.corr.matrix)[[1]]
res1 <- cor.mtest(as.data.frame(prepan_retro_dat[,prepan_retro_items]))
conf <- paste0("[", format(res1[[2]], digits=2), ":", format(res1[[3]], digits=2), "]")
conf
res1
xs <- row(res1[[1]])
ys <- (ncol(res1[[1]])+1) - col(res1[[1]])
xs[lower.tri(xs,diag=FALSE)] <- 0
ys[lower.tri(ys,diag=FALSE)] <- 0
xs
ys
#Paste conf into the correlation matrix
corrplot(prepan_retro.corr.matrix,
method = "color", # objects to represent the correlations on plot
type = "lower", # only use the lower triangle of the matrix
diag = FALSE, # do not show the correlations on the diagonal
addgrid.col = NA,
addCoef.col = "black", # colour for the correlation coefficients in the plot
tl.cex = 0.8,
tl.col = "black",
col=colorRampPalette(c("dodgerblue4","white","firebrick4"))(200), # colours for correlations
# Combine with significance
p.mat = prepan_retro.p.matrix, # Matrix with p values
sig.level = 0.01, # Choose significant level
insig = "blank" # Nonsignificant correlations have no colour
)
text(xs, ys, conf, pos=1, cex=0.8)
# Select items for correlation matrix
prepan_retro_items <- c(
"gad.sum_score_prepan",
"gad.sum_score_retro",
"phq.sum_score_prepan",
"phq.sum_score_retro"
)
#Create a data set with only the GLAD and EDGI
prepan_retro_dat <- dat[str_detect(dat$Sample, "GLAD|EDGI"), ]
#Check that RAMP and NBR has been removed
prepan_retro_dat %>%
freq(Sample)
# Calculate correlation matrix on specific columns (variables) from your data frame
prepan_retro.corr.mat <- hetcor(
as.data.frame(prepan_retro_dat[,prepan_retro_items]), # Specify the data
use = "pairwise.complete.obs" # Use all pairwise observations
)
# Print the correlation matrix
print(prepan_retro.corr.mat, digits = max(3, getOption("digits") - 3))
# Save the correlations from the correlation matrix in an object
prepan_retro.corr.matrix <- as.matrix(prepan_retro.corr.mat)
# Save the p values from the correlation matrix in an object
prepan_retro.p.matrix <- as.matrix(prepan_retro.corr.mat$tests)
res1 <- cor.ci(prepan_retro.corr.matrix)[[1]]
res1 <- cor.mtest(as.data.frame(prepan_retro_dat[,prepan_retro_items]))
conf <- paste0("[", format(res1[[2]], digits=2), ":", format(res1[[3]], digits=2), "]")
conf
res1
xs <- row(res1[[1]])
ys <- (ncol(res1[[1]])+1) - col(res1[[1]])
xs[lower.tri(xs,diag=TRUE)] <- 0
ys[lower.tri(ys,diag=TRUE)] <- 0
xs
ys
#Paste conf into the correlation matrix
corrplot(prepan_retro.corr.matrix,
method = "color", # objects to represent the correlations on plot
type = "lower", # only use the lower triangle of the matrix
diag = FALSE, # do not show the correlations on the diagonal
addgrid.col = NA,
addCoef.col = "black", # colour for the correlation coefficients in the plot
tl.cex = 0.8,
tl.col = "black",
col=colorRampPalette(c("dodgerblue4","white","firebrick4"))(200), # colours for correlations
# Combine with significance
p.mat = prepan_retro.p.matrix, # Matrix with p values
sig.level = 0.01, # Choose significant level
insig = "blank" # Nonsignificant correlations have no colour
)
text(xs, ys, conf, pos=1, cex=0.8)
cor.ci(prepan_retro.corr.matrix)
res1 <- cor.mtest(as.data.frame(prepan_retro_dat[,prepan_retro_items]), 0.99)
# Select items for correlation matrix
prepan_retro_items <- c(
"gad.sum_score_prepan",
"gad.sum_score_retro",
"phq.sum_score_prepan",
"phq.sum_score_retro"
)
#Create a data set with only the GLAD and EDGI
prepan_retro_dat <- dat[str_detect(dat$Sample, "GLAD|EDGI"), ]
#Check that RAMP and NBR has been removed
prepan_retro_dat %>%
freq(Sample)
# Calculate correlation matrix on specific columns (variables) from your data frame
prepan_retro.corr.mat <- hetcor(
as.data.frame(prepan_retro_dat[,prepan_retro_items]), # Specify the data
use = "pairwise.complete.obs" # Use all pairwise observations
)
# Print the correlation matrix
print(prepan_retro.corr.mat, digits = max(3, getOption("digits") - 3))
# Save the correlations from the correlation matrix in an object
prepan_retro.corr.matrix <- as.matrix(prepan_retro.corr.mat)
# Save the p values from the correlation matrix in an object
prepan_retro.p.matrix <- as.matrix(prepan_retro.corr.mat$tests)
res1 <- cor.ci(prepan_retro.corr.matrix)[[1]]
res1 <- cor.mtest(as.data.frame(prepan_retro_dat[,prepan_retro_items]), 0.99)
conf <- paste0("[", format(res1[[2]], digits=2), ":", format(res1[[3]], digits=2), "]")
conf
res1
xs <- row(res1[[1]])
ys <- (ncol(res1[[1]])+1) - col(res1[[1]])
xs[lower.tri(xs,diag=TRUE)] <- 0
ys[lower.tri(ys,diag=TRUE)] <- 0
xs
ys
#Paste conf into the correlation matrix
corrplot(prepan_retro.corr.matrix,
method = "color", # objects to represent the correlations on plot
type = "lower", # only use the lower triangle of the matrix
diag = FALSE, # do not show the correlations on the diagonal
addgrid.col = NA,
addCoef.col = "black", # colour for the correlation coefficients in the plot
tl.cex = 0.8,
tl.col = "black",
col=colorRampPalette(c("dodgerblue4","white","firebrick4"))(200), # colours for correlations
# Combine with significance
p.mat = prepan_retro.p.matrix, # Matrix with p values
sig.level = 0.01, # Choose significant level
insig = "blank" # Nonsignificant correlations have no colour
)
text(xs, ys, conf, pos=1, cex=0.8)
corPlotUpperLowerCI(res1)
corPlotUpperLowerCi(res1)
cor.mtest <- function(mat, conf.level = 0.95){
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- lowCI.mat <- uppCI.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
diag(lowCI.mat) <- diag(uppCI.mat) <- 1
for(i in 1:(n-1)){
for(j in (i+1):n){
tmp <- cor.ci(mat[,i], mat[,j], conf.level = conf.level)
p.mat[i,j] <- p.mat[j,i] <- tmp$p.value
lowCI.mat[i,j] <- lowCI.mat[j,i] <- tmp$conf.int[1]
uppCI.mat[i,j] <- uppCI.mat[j,i] <- tmp$conf.int[2]
}
}
return(list(p.mat, lowCI.mat, uppCI.mat))
}
# Select items for correlation matrix
prepan_retro_items <- c(
"gad.sum_score_prepan",
"gad.sum_score_retro",
"phq.sum_score_prepan",
"phq.sum_score_retro"
)
#Create a data set with only the GLAD and EDGI
prepan_retro_dat <- dat[str_detect(dat$Sample, "GLAD|EDGI"), ]
#Check that RAMP and NBR has been removed
prepan_retro_dat %>%
freq(Sample)
# Calculate correlation matrix on specific columns (variables) from your data frame
prepan_retro.corr.mat <- hetcor(
as.data.frame(prepan_retro_dat[,prepan_retro_items]), # Specify the data
use = "pairwise.complete.obs" # Use all pairwise observations
)
# Print the correlation matrix
print(prepan_retro.corr.mat, digits = max(3, getOption("digits") - 3))
# Save the correlations from the correlation matrix in an object
prepan_retro.corr.matrix <- as.matrix(prepan_retro.corr.mat)
# Save the p values from the correlation matrix in an object
prepan_retro.p.matrix <- as.matrix(prepan_retro.corr.mat$tests)
res1 <- cor.ci(prepan_retro.corr.matrix)
res1 <- cor.mtest(as.data.frame(prepan_retro_dat[,prepan_retro_items]), 0.99)
cor.mtest <- function(mat, conf.level = 0.95){
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- lowCI.mat <- uppCI.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
diag(lowCI.mat) <- diag(uppCI.mat) <- 1
for(i in 1:(n-1)){
for(j in (i+1):n){
tmp <- cor.test(mat[,i], mat[,j], conf.level = conf.level)
p.mat[i,j] <- p.mat[j,i] <- tmp$p.value
lowCI.mat[i,j] <- lowCI.mat[j,i] <- tmp$conf.int[1]
uppCI.mat[i,j] <- uppCI.mat[j,i] <- tmp$conf.int[2]
}
}
return(list(p.mat, lowCI.mat, uppCI.mat))
}
# Select items for correlation matrix
prepan_retro_items <- c(
"gad.sum_score_prepan",
"gad.sum_score_retro",
"phq.sum_score_prepan",
"phq.sum_score_retro"
)
#Create a data set with only the GLAD and EDGI
prepan_retro_dat <- dat[str_detect(dat$Sample, "GLAD|EDGI"), ]
#Check that RAMP and NBR has been removed
prepan_retro_dat %>%
freq(Sample)
# Calculate correlation matrix on specific columns (variables) from your data frame
prepan_retro.corr.mat <- hetcor(
as.data.frame(prepan_retro_dat[,prepan_retro_items]), # Specify the data
use = "pairwise.complete.obs" # Use all pairwise observations
)
# Print the correlation matrix
print(prepan_retro.corr.mat, digits = max(3, getOption("digits") - 3))
# Save the correlations from the correlation matrix in an object
prepan_retro.corr.matrix <- as.matrix(prepan_retro.corr.mat)
# Save the p values from the correlation matrix in an object
prepan_retro.p.matrix <- as.matrix(prepan_retro.corr.mat$tests)
res1 <- cor.ci(prepan_retro.corr.matrix)
res1 <- cor.mtest(as.data.frame(prepan_retro_dat[,prepan_retro_items]), 0.99)
conf <- paste0("[", format(res1[[2]], digits=2), ":", format(res1[[3]], digits=2), "]")
conf
res1
xs <- row(res1[[1]])
ys <- (ncol(res1[[1]])+1) - col(res1[[1]])
xs[lower.tri(xs,diag=TRUE)] <- 0
ys[lower.tri(ys,diag=TRUE)] <- 0
xs
ys
#Paste conf into the correlation matrix
#Filter by self-reported change since pandemic started
much_worse_gad <- dat %>%
filter(gad.pandemic_felt_feelings == "Much worse")
little_worse_gad <- dat %>%
filter(gad.pandemic_felt_feelings == "A little worse")
little_better_gad <- dat %>%
filter(gad.pandemic_felt_feelings == "A little better")
much_better_gad <- dat %>%
filter(gad.pandemic_felt_feelings == "Much better")
#Visualise each as a scatterplot
much_worse_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +
geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4)
little_worse_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +
geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4)
little_better_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +
geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4)
much_better_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +
geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4)
#Group pt reporting much worse and a little worse, and group pt reporting much better and a little better
much_worse_little_worse_gad <- dat %>%
filter(gad.pandemic_felt_feelings == "Much worse" |
gad.pandemic_felt_feelings == "A little worse")
much_better_little_better_gad <- dat %>%
filter(gad.pandemic_felt_feelings == "Much better" |
gad.pandemic_felt_feelings == "A little better")
#Visualise the gad sum scores as scatterplots
much_worse_little_worse_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +  geom_point(colour = "blue") +
stat_smooth(method = "lm")
much_better_little_better_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +
geom_point(colour = "blue") +
stat_smooth(method = "lm")
much_better_little_better_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +
geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4)
much_worse_little_worse_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +  geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4)
much_better_little_better_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +
geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4)
much_worse_little_worse_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +  geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4) +
labs(title = paste("Relationship between prepandemc and retrospective GAD scores for pt reporting much worh and a little worse",
sep=" "),
subtitle = paste("n", dim(much_worse_little_worse_gad)[1]))
much_worse_little_worse_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +  geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4) +
labs(title = paste("Relationship between prepandemc and retrospective GAD scores",
sep=" "),
subtitle = paste("n", dim(much_worse_little_worse_gad)[1]))
much_worse_little_worse_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +  geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4) +
labs(title = paste("Relationship between prepandemc and retrospective GAD scores/n
for participants reporting much worse and a little worse",
sep=" "),
subtitle = paste("n", dim(much_worse_little_worse_gad)[1]))
much_worse_little_worse_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +  geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4) +
labs(title = paste("Relationship between prepandemc and retrospective GAD scores",
/n,
much_worse_little_worse_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +  geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4) +
labs(title = paste("Relationship between prepandemc and retrospective GAD scores",
"/n",
"for participants reporting much worse and a little worse",
sep=" "),
subtitle = paste("n", dim(much_worse_little_worse_gad)[1]))
much_worse_little_worse_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +  geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4) +
labs(title = paste("Relationship between prepandemc and retrospective GAD scores\n
for participants reporting much worse and a little worse",
sep=" "),
subtitle = paste("n", dim(much_worse_little_worse_gad)[1]))
much_worse_little_worse_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +  geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4) +
labs(title = paste("Relationship between prepandemc and retrospective GAD scores\nfor participants reporting much worse and a little worse",
sep=" "),
subtitle = paste("n", dim(much_worse_little_worse_gad)[1]))
much_better_little_better_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +
geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4) +
labs(title = paste("Relationship between prepandemc and retrospective GAD scores\nfor participants reporting much better and a little better",
sep=" "),
subtitle = paste("n", dim(much_better_little_better_gad)[1]))
#Filter by self-reported change since pandemic started
much_worse_gad <- dat %>%
filter(gad.pandemic_felt_feelings == "Much worse")
little_worse_gad <- dat %>%
filter(gad.pandemic_felt_feelings == "A little worse")
little_better_gad <- dat %>%
filter(gad.pandemic_felt_feelings == "A little better")
much_better_gad <- dat %>%
filter(gad.pandemic_felt_feelings == "Much better")
#Visualise each as a scatterplot
much_worse_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +
geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4) +
labs(title = paste("Relationship between prepandemc and retrospective GAD scores\nfor participants reporting much worse",
sep=" "),
subtitle = paste("n", dim(much_worse_gad)[1]))
little_worse_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +
geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4) +
labs(title = paste("Relationship between prepandemc and retrospective GAD scores\nfor participants reporting a little worse",
sep=" "),
subtitle = paste("n", dim(little_worse_gad)[1]))
little_better_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +
geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4) +
labs(title = paste("Relationship between prepandemc and retrospective GAD scores\nfor participants reporting a little better",
sep=" "),
subtitle = paste("n", dim(little_better_gad)[1]))
much_better_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +
geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4) +
labs(title = paste("Relationship between prepandemc and retrospective GAD scores\nfor participants reporting a little worse",
sep=" "),
subtitle = paste("n", dim(much_better_gad)[1]))
much_better_little_better_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +
geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4) +
labs(title = paste("Relationship between prepandemc and retrospective GAD scores\nfor participants reporting much better and a little better",
sep=" "),
subtitle = paste("n", dim(much_better_little_better_gad)[1]))
