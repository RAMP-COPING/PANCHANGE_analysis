"pcl.feeling_irritable_or_having_angry_outbursts_retro_numeric",
"pcl.difficulty_concentrating_retro_numeric"
)
# Calulate total score
pcl.scored_items_retro <- scoreItems(keys = pcl.items_key_retro,
items = coping.glad.pcl.raw.id[pcl.items_retro],
totals = TRUE,
missing = TRUE,
impute = 'none',
min = 0,
max = 1)
# Add in column to tibble
coping.glad.pcl.raw.id$pcl.sum_score_retro <- pcl.scored_items_retro$scores
# Look at values
coping.glad.pcl.raw.id %>%
descr(pcl.sum_score_retro,
stats = "common"
)
# Create vector with scoring key: If the item is reversed coded use -1.
# There needs to be the correct number of values for each item in the questionnaire.
pcl.items_key_base <- c(1,1,1,1,1,1)
# Create vector with items that are included in total score
pcl.items_base <- c(
"pcl.stressful_experience_repeated_images_base_numeric",
"pcl.stressful_experience_upset_reminded_base_numeric",
"pcl.stressful_situation_avoiding_activities_base_numeric",
"pcl.cut_people_feeling_distant_base_numeric",
"pcl.feeling_irritable_or_having_angry_outbursts_base_numeric",
"pcl.difficulty_concentrating_base_numeric"
)
# Calulate total score
pcl.scored_items_base <- scoreItems(keys = pcl.items_key_base,
items = coping.glad.pcl.raw.id[pcl.items_base],
totals = TRUE,
missing = TRUE,
impute = "none",
min = 1,
max = 5)
# Add in column to tibble
coping.glad.pcl.raw.id$pcl.sum_score_base <- pcl.scored_items_base$scores
# Look at values
coping.glad.pcl.raw.id %>%
descr(pcl.sum_score_base,
stats = "common"
)
head(coping.glad.pcl.raw.id)
summarytools::dfSummary(
coping.glad.pcl.raw.id,
graph.col = F,
valid.col = F,
labels.col = F)
coping.glad.phq.raw <- readRDS(file = paste0(data.raw_path, "/glad/phq_coping_glad.rds"))
dim(coping.glad.phq.raw)
colnames(coping.glad.phq.raw)
summarytools::dfSummary(
coping.glad.phq.raw,
graph.col = F,
valid.col = F
#labels.col = F
)
coping.glad.phq.raw.id <- coping.glad.phq.raw %>%
drop_na(externalDataReference) %>% # Drop NAs
distinct(externalDataReference, .keep_all = TRUE) %>% # Remove duplicates based on ID
separate(externalDataReference, into = c("Sample", "ID"), sep = 4) %>% # Split ID in Sample and Number
mutate(ID = as.numeric(ID),
startDate.glad = startDate) %>% # Rename startDate
select(
Sample, # Sample
ID, # ID
phq.problems_made_difficult_care,
phq.pandemic_felt_feelings,
phq.little_interest_or_pleasure_in_doing_things_retro = phq.little_interest_or_pleasure_in_doing_things,
phq.feeling_down_depressed_or_hopeless_retro = phq.feeling_down_depressed_or_hopeless,
phq.staying_asleep_sleeping_trouble_retro = phq.staying_asleep_sleeping_trouble,
phq.feeling_tired_or_having_little_energy_retro = phq.feeling_tired_or_having_little_energy,
phq.poor_appetite_or_overeating_retro = phq.poor_appetite_or_overeating,
phq.feeling_bad_failure_family_retro = phq.feeling_bad_failure_family,
phq.trouble_concentrating_reading_newspaper_retro = phq.trouble_concentrating_newspaper_reading, # differ GLAD prepandemic
phq.moving_fidgety_noticed_opposite_retro = phq.moving_fidgety_opposite_slowly, # differ GLAD prepandemic
phq.dead_hurting_thoughts_retro = phq.dead_hurting_thoughts,
phq.little_interest_or_pleasure_in_doing_things_base = phq.little_interest_or_pleasure_in_doing_things.1,
phq.feeling_down_depressed_or_hopeless_base = phq.feeling_down_depressed_or_hopeless.1,
phq.staying_asleep_sleeping_trouble_base = phq.staying_asleep_sleeping_trouble.1,
phq.feeling_tired_or_having_little_energy_base = phq.feeling_tired_or_having_little_energy.1,
phq.poor_appetite_or_overeating_base = phq.poor_appetite_or_overeating.1,
phq.feeling_bad_failure_family_base = phq.feeling_bad_failure_family.1,
phq.trouble_concentrating_reading_newspaper_base = phq.trouble_concentrating_newspaper_reading.1, # differ GLAD prepandemic
phq.moving_fidgety_noticed_opposite_base = phq.moving_fidgety_opposite_slowly.1, # differ GLAD prepandemic
phq.dead_hurting_thoughts_base = phq.dead_hurting_thoughts.1
) %>%
add_numeric(., exclude = exclude_cols) %>%
mutate_if(is.numeric, ~na_if(., -88)) %>% # Recode missing values to NAs in numeric variables
mutate_if(is.numeric, ~na_if(., -99)) %>%
mutate_if(is.numeric, ~na_if(., -77)) %>%
mutate_if(is.factor, ~na_if(., "Seen but not answered")) %>% # Recode missing values to NAs in factor variables
mutate_if(is.factor, ~na_if(., "Don't know")) %>%
mutate_if(is.factor, ~na_if(., "Prefer not to say")) %>%
mutate_if(is.factor, ~na_if(., "Prefer not to answer")) %>%
mutate_if(is.factor, ~forcats::fct_drop(., only = "Seen but not answered")) %>% # Drop empty factor levels
mutate_if(is.factor, ~forcats::fct_drop(., only = "Don't know")) %>%
mutate_if(is.factor, ~forcats::fct_drop(., only = "Prefer not to answer")) %>%
mutate_if(is.factor, ~forcats::fct_drop(., only = "Prefer not to say"))
# Inspect dimensions
dim(coping.glad.phq.raw.id)
# Inspect colnames
colnames(coping.glad.phq.raw.id)
#Differences
dim(coping.glad.phq.raw)[1]-dim(coping.glad.phq.raw.id)[1]
# Create vector with scoring key: If the item is reversed coded use -1.
# There needs to be the correct number of values for each item in the questionnaire.
phq.items_key_retro <- c(1,1,1,1,1,1,1,1,1)
# Create vector with items that are included in total score
phq.items_retro <- c(
"phq.little_interest_or_pleasure_in_doing_things_retro_numeric",
"phq.feeling_down_depressed_or_hopeless_retro_numeric",
"phq.staying_asleep_sleeping_trouble_retro_numeric",
"phq.feeling_tired_or_having_little_energy_retro_numeric",
"phq.poor_appetite_or_overeating_retro_numeric",
"phq.feeling_bad_failure_family_retro_numeric",
"phq.trouble_concentrating_reading_newspaper_retro_numeric",
"phq.moving_fidgety_noticed_opposite_retro_numeric",
"phq.dead_hurting_thoughts_retro_numeric"
)
# Calulate total score
phq.scored_items_retro <- scoreItems(keys = phq.items_key_retro,
items = coping.glad.phq.raw.id[phq.items_retro],
totals = TRUE,
missing = TRUE,
impute = 'none',
min = 0,
max = 3)
# Add in column to tibble
coping.glad.phq.raw.id$phq.sum_score_retro <- phq.scored_items_retro$scores
# Look at values
coping.glad.phq.raw.id %>%
descr(phq.sum_score_retro,
stats = "common"
)
# Create vector with scoring key: If the item is reversed coded use -1.
# There needs to be the correct number of values for each item in the questionnaire.
phq.items_key_base <- c(1,1,1,1,1,1,1,1,1)
# Create vector with items that are included in total score
phq.items_base <- c(
"phq.little_interest_or_pleasure_in_doing_things_base_numeric",
"phq.feeling_down_depressed_or_hopeless_base_numeric",
"phq.staying_asleep_sleeping_trouble_base_numeric",
"phq.feeling_tired_or_having_little_energy_base_numeric",
"phq.poor_appetite_or_overeating_base_numeric",
"phq.feeling_bad_failure_family_base_numeric",
"phq.trouble_concentrating_reading_newspaper_base_numeric",
"phq.moving_fidgety_noticed_opposite_base_numeric",
"phq.dead_hurting_thoughts_base_numeric"
)
# Calulate total score
phq.scored_items_base <- scoreItems(keys = phq.items_key_base,
items = coping.glad.phq.raw.id[phq.items_base],
totals = TRUE,
missing = TRUE,
impute = 'none',
min = 0,
max = 3)
# Add in column to tibble
coping.glad.phq.raw.id$phq.sum_score_base <- phq.scored_items_base$scores
# Look at values
coping.glad.phq.raw.id %>%
descr(phq.sum_score_base,
stats = "common"
)
head(coping.glad.phq.raw.id)
summarytools::dfSummary(
coping.glad.phq.raw.id,
graph.col = F,
valid.col = F,
labels.col = F)
coping.glad.ocir.raw <- readRDS(file = paste0(data.raw_path, "/glad/ocir_coping_glad.rds"))
dim(coping.glad.ocir.raw)
colnames(coping.glad.ocir.raw)
summarytools::dfSummary(
coping.glad.ocir.raw,
graph.col = F,
valid.col = F
#labels.col = F
)
coping.glad.ocir.raw.id <- coping.glad.ocir.raw %>%
drop_na(recipientFirstName) %>% # Drop NAs
distinct(recipientFirstName, .keep_all = TRUE) %>% # Remove duplicates based on ID
separate(recipientFirstName, into = c("Sample", "ID"), sep = 4) %>% # Split ID in Sample and Number
mutate(ID = as.numeric(ID),
startDate.glad = startDate) %>% # Rename startDate
select(
Sample, # Sample
ID, # ID
ocir.felt_pandemic_feelings, # Comparison to before the pandemic
ocir.i_repeatedly_check_doors_windows_drawers_etc_retro = ocir.i_repeatedly_check_doors_windows_drawers_etc.,
ocir.arranged_things_change_upset_retro = ocir.arranged_things_change_upset,
ocir.repeat_feel_numbers_retro = ocir.numbers_repeat_feel, ## Different from GLAD prepandemic
ocir.clean_simply_wash_feel_retro = ocir.feel_contaminated_clean_simply, ## Different from GLAD prepandemic
ocir.mind_upset_unpleasant_thoughts_retro = ocir.mind_upset_unpleasant_thoughts,
ocir.afraid_avoid_throwing_things_retro = ocir.afraid_avoid_throwing_things,
ocir.light_switches_water_taps_retro = ocir.light_switches_water_taps,
ocir.arranged_things_retro = ocir.arranged_things,
ocir.good_feel_bad_numbers_retro = ocir.bad_numbers_good_feel, ## Different from GLAD prepandemic
ocir.hands_longer_wash_retro = ocir.longer_hands_wash, ## Different from GLAD prepandemic
ocir.saved_things_retro = ocir.saved_things,
ocir.frequently_difficulty_rid_nasty_retro = ocir.frequently_rid_difficulty_nasty, ## Different from GLAD prepandemic
ocir.i_check_things_more_often_than_necessary_retro = ocir.i_check_things_more_often_than_necessary.,
ocir.arranged_properly_objects_upset_retro = ocir.arranged_properly_objects_upset,
ocir.feel_compelled_count_things_retro = ocir.feel_compelled_count_things,
ocir.strangers_touch_touched_difficult_retro = ocir.strangers_touch_touched_object, ## Different from GLAD prepandemic
ocir.control_difficult_find_thoughts_retro = ocir.control_find_difficult_thoughts, ## Different from GLAD prepandemic
ocir.i_collect_things_i_dont_need_retro = ocir.i_collect_things_i_dont_need., ## Different from GLAD prepandemic
ocir.i_repeatedly_check_doors_windows_drawers_etc_base = ocir.i_repeatedly_check_doors_windows_drawers_etc..1,
ocir.arranged_things_change_upset_base = ocir.arranged_things_change_upset.1,
ocir.repeat_feel_numbers_base = ocir.numbers_repeat_feel.1, ## Different from GLAD prepandemic
ocir.clean_simply_wash_feel_base = ocir.feel_contaminated_clean_simply.1, ## Different from GLAD prepandemic
ocir.mind_upset_unpleasant_thoughts_base = ocir.mind_upset_unpleasant_thoughts.1,
ocir.afraid_avoid_throwing_things_base = ocir.afraid_avoid_throwing_things.1,
ocir.light_switches_water_taps_base = ocir.light_switches_water_taps.1,
ocir.arranged_things_base = ocir.arranged_things.1,
ocir.good_feel_bad_numbers_base = ocir.bad_numbers_good_feel.1, ## Different from GLAD prepandemic
ocir.hands_longer_wash_base = ocir.longer_hands_wash.1, ## Different from GLAD prepandemic
ocir.saved_things_base = ocir.saved_things.1,
ocir.frequently_difficulty_rid_nasty_base = ocir.frequently_rid_difficulty_nasty.1, ## Different from GLAD prepandemic
ocir.i_check_things_more_often_than_necessary_base = ocir.i_check_things_more_often_than_necessary..1,
ocir.arranged_properly_objects_upset_base = ocir.arranged_properly_objects_upset.1,
ocir.feel_compelled_count_things_base = ocir.feel_compelled_count_things.1,
ocir.strangers_touch_touched_difficult_base = ocir.strangers_touch_touched_object.1, ## Different from GLAD prepandemic
ocir.control_difficult_find_thoughts_base = ocir.control_find_difficult_thoughts.1, ## Different from GLAD prepandemic
ocir.i_collect_things_i_dont_need_base = ocir.i_collect_things_i_dont_need..1
) %>%
add_numeric(., exclude = exclude_cols) %>%
mutate_if(is.numeric, ~na_if(., -88)) %>% # Recode missing values to NAs in numeric variables
mutate_if(is.numeric, ~na_if(., -99)) %>%
mutate_if(is.numeric, ~na_if(., -77)) %>%
mutate_if(is.factor, ~na_if(., "Seen but not answered")) %>% # Recode missing values to NAs in factor variables
mutate_if(is.factor, ~na_if(., "Don't know")) %>%
mutate_if(is.factor, ~na_if(., "Prefer not to say")) %>%
mutate_if(is.factor, ~na_if(., "Prefer not to answer")) %>%
mutate_if(is.factor, ~forcats::fct_drop(., only = "Seen but not answered")) %>% # Drop empty factor levels
mutate_if(is.factor, ~forcats::fct_drop(., only = "Don't know")) %>%
mutate_if(is.factor, ~forcats::fct_drop(., only = "Prefer not to answer")) %>%
mutate_if(is.factor, ~forcats::fct_drop(., only = "Prefer not to say"))
# Inspect dimensions
dim(coping.glad.ocir.raw.id)
# Inspect colnames
colnames(coping.glad.ocir.raw.id)
#Differences
dim(coping.glad.ocir.raw)[1]-dim(coping.glad.ocir.raw.id)[1]
# Create vector with scoring key: If the item is reversed coded use -1.
# There needs to be the correct number of values for each item in the questionnaire.
ocir.items_key_retro <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
# Create vector with items that are included in total score
ocir.items_retro = c(
"ocir.i_repeatedly_check_doors_windows_drawers_etc_retro",
"ocir.arranged_things_change_upset_retro",
"ocir.repeat_feel_numbers_retro",
"ocir.clean_simply_wash_feel_retro",
"ocir.mind_upset_unpleasant_thoughts_retro",
"ocir.afraid_avoid_throwing_things_retro",
"ocir.light_switches_water_taps_retro",
"ocir.arranged_things_retro",
"ocir.good_feel_bad_numbers_retro",
"ocir.hands_longer_wash_retro",
"ocir.saved_things_retro",
"ocir.frequently_difficulty_rid_nasty_retro",
"ocir.i_check_things_more_often_than_necessary_retro",
"ocir.arranged_properly_objects_upset_retro",
"ocir.feel_compelled_count_things_retro",
"ocir.strangers_touch_touched_difficult_retro",
"ocir.control_difficult_find_thoughts_retro",
"ocir.i_collect_things_i_dont_need_retro"
)
# Calulate total score
ocir.scored_items_retro <- scoreItems(keys = ocir.items_key_retro,
items = coping.glad.ocir.raw.id[ocir.items_retro],
totals = TRUE,
missing = TRUE,
impute = 'none',
min = 0,
max = 4)
# Add in column to tibble
coping.glad.ocir.raw.id$ocir.sum_score_retro <- ocir.scored_items_retro$scores
# Look at values
coping.glad.ocir.raw.id %>%
descr(ocir.sum_score_retro,
stats = "common"
)
# Create vector with scoring key: If the item is reversed coded use -1.
# There needs to be the correct number of values for each item in the questionnaire.
ocir.items_key_base <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
# Create vector with items that are included in total score
ocir.items_base = c(
"ocir.i_repeatedly_check_doors_windows_drawers_etc_base",
"ocir.arranged_things_change_upset_base",
"ocir.repeat_feel_numbers_base",
"ocir.clean_simply_wash_feel_base",
"ocir.mind_upset_unpleasant_thoughts_base",
"ocir.afraid_avoid_throwing_things_base",
"ocir.light_switches_water_taps_base",
"ocir.arranged_things_base",
"ocir.good_feel_bad_numbers_base",
"ocir.hands_longer_wash_base",
"ocir.saved_things_base",
"ocir.frequently_difficulty_rid_nasty_base",
"ocir.i_check_things_more_often_than_necessary_base",
"ocir.arranged_properly_objects_upset_base",
"ocir.feel_compelled_count_things_base",
"ocir.strangers_touch_touched_difficult_base",
"ocir.control_difficult_find_thoughts_base",
"ocir.i_collect_things_i_dont_need_base"
)
# Calulate total score
ocir.scored_items_base <- scoreItems(keys = ocir.items_key_base,
items = coping.glad.ocir.raw.id[ocir.items_base],
totals = TRUE,
missing = TRUE,
impute = 'none',
min = 0,
max = 4)
# Add in column to tibble
coping.glad.ocir.raw.id$ocir.sum_score_base <- ocir.scored_items_base$scores
# Look at values
coping.glad.ocir.raw.id %>%
descr(ocir.sum_score_base,
stats = "common"
)
head(coping.glad.ocir.raw.id)
summarytools::dfSummary(
coping.glad.ocir.raw.id,
graph.col = F,
valid.col = F,
labels.col = F)
glad.dfs.list <- list(
glad.dem.raw.id,
glad.gad.raw.id,
glad.mhd.raw.categories,
glad.ocir.raw.id,
glad.pcl.raw.id,
glad.phq.raw.id,
coping.glad.gad.raw.id,
coping.glad.pcl.raw.id,
coping.glad.phq.raw.id,
coping.glad.ocir.raw.id
)
dat.glad.raw <- plyr::join_all(
glad.dfs.list,
by = c("ID", "Sample") # Alternatively you can join by several columns EDGI -> "Age", "Sex", "Birthyear"
)
#look at the data
skimr::skim(dat.glad.raw)
ls()
glad.phq.raw.id <- glad.phq.raw.id %>%
mutate(
na_per_person_phq_base =         # variable for NA per person
rowSums(
is.na(glad.phq.raw.id[phq.items_base])
)
)
glad.phq.raw.id <- glad.phq.raw.id %>%
mutate(
na_per_person_phq_base =         # variable for NA per person
rowSums(
is.na(.[phq.items_base])
)
)
glad.phq.raw.id <- glad.phq.raw.id %>%
mutate(
na_per_person_phq_base =         # variable for NA per person
rowSums(
is.na(.[phq.items_base])
)
)
glad.phq.raw.id
glad.phq.raw.id[phq.items_base]
colnames(glad.phq.raw.id)
coping.glad.phq.raw.id <- coping.glad.phq.raw.id %>%
mutate(
na_per_person_phq_base =         # variable for NA per person
rowSums(
is.na(.[phq.items_base])
)
)
coping.glad.phq.raw.id %>%
freq(na_per_person_phq_base, cumul = F) #have a look at the frequency
coping.glad.phq.raw.id <- coping.glad.phq.raw.id %>% #NA per person as a percentage
mutate(
miss_pc_total_phq_base =
na_per_person_phq_base/9 # NA per person divided by the amount of items
)
coping.glad.phq.raw.id %>%
freq(miss_pc_total_phq_base)
coping.glad.phq.raw.id <- coping.glad.phq.raw.id %>%
mutate(
na_per_person_phq_base =         # variable for NA per person
rowSums(
is.na(.[phq.items_base])
)
)
coping.glad.phq.raw.id %>%
freq(na_per_person_phq_base, cumul = F) #have a look at the frequency
coping.glad.phq.raw.id <- coping.glad.phq.raw.id %>%
mutate(
phq.missing_only_suicide_item =
if_else(
condition = na_per_person_phq_base == 1 &
is.na(phq.dead_hurting_thoughts_base_numeric),
true = 1,
false = 0,
missing = NA_real_
)
)
coping.glad.phq.raw.id %>%
freq(phq.missing_only_suicide_item,
cumul = F)
coping.glad.phq.raw.id <- coping.glad.phq.raw.id %>%
mutate(
na_per_person_phq_retro =         # variable for NA per person
rowSums(.[phq.items_retro]
)
)
coping.glad.phq.raw.id %>%
freq(na_per_person_phq_retro, cumul = F) #have a look at the frequency
coping.glad.phq.raw.id <- coping.glad.phq.raw.id %>%
mutate(
phq.missing_only_suicide_item_retro =
if_else(
condition = na_per_person_phq_retro == 1 &
is.na(phq.dead_hurting_thoughts_retro_numeric),
true = 1,
false = 0,
missing = NA_real_
)
)
coping.glad.phq.raw.id %>%
freq(phq.missing_only_suicide_item_retro,
cumul = F)
phq.items_retro
coping.glad.phq.raw.id <- coping.glad.phq.raw.id %>%
mutate(
na_per_person_phq_retro =         # variable for NA per person
rowSums(
is.na(.[phq.items_retro])
)
)
coping.glad.phq.raw.id %>%
freq(na_per_person_phq_retro, cumul = F) #have a look at the frequency
coping.glad.phq.raw.id <- coping.glad.phq.raw.id %>%
mutate(
phq.missing_only_suicide_item_retro =
if_else(
condition = na_per_person_phq_retro == 1 &
is.na(phq.dead_hurting_thoughts_retro_numeric),
true = 1,
false = 0,
missing = NA_real_
)
)
coping.glad.phq.raw.id %>%
freq(phq.missing_only_suicide_item_retro,
cumul = F)
glad.phq.raw.id <- glad.phq.raw.id %>%
mutate(
na_per_person_phq_prepan =         # variable for NA per person
rowSums(
is.na(.[phq.items_prepan])
)
)
glad.phq.raw.id %>%
freq(na_per_person_phq_prepan,
cumul = F)
coping.glad.phq.raw.id <- coping.glad.phq.raw.id %>%
mutate(
phq.missing_only_suicide_item_prepan =
if_else(
condition = na_per_person_phq_prepan == 1 &
is.na(phq.dead_hurting_thoughts_prepan_numeric),
true = 1,
false = 0,
missing = NA_real_
)
)
glad.phq.raw.id <- coping.glad.phq.raw.id %>%
mutate(
phq.missing_only_suicide_item_prepan =
if_else(
condition = na_per_person_phq_prepan == 1 &
is.na(phq.dead_hurting_thoughts_prepan_numeric),
true = 1,
false = 0,
missing = NA_real_
)
)
glad.phq.raw.id <- glad.phq.raw.id %>%
mutate(
phq.missing_only_suicide_item_prepan =
if_else(
condition = na_per_person_phq_prepan == 1 &
is.na(phq.dead_hurting_thoughts_prepan_numeric),
true = 1,
false = 0,
missing = NA_real_
)
)
glad.phq.raw.id %>%
freq(phq.missing_only_suicide_item_prepan,
cumul = F)
#baseline
table(coping.glad.phq.raw.id$na_per_person_phq_base)
#retrospective
table(coping.glad.phq.raw.id$na_per_person_phq_retro)
#pre-pandemic
table(glad.phq.raw.id$na_per_person_phq_prepan)
