subtitle = paste("n", dim(much_better_gad)[1]))
much_better_little_better_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +
geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4) +
labs(title = paste("Relationship between prepandemc and retrospective GAD scores\nfor participants reporting much better and a little better",
sep=" "),
subtitle = paste("n", dim(much_better_little_better_gad)[1]))
knitr::opts_chunk$set(echo = FALSE,
comment=NA,
prompt=FALSE,
cache=FALSE)
options(bitmapType = 'quartz') # to render fonts better
remove(list = ls())
date = Sys.Date()
#install.packages("summarytools")
#install.packages("tidyverse")
#install.packages("psych")
#install.packages("broom")
#install.packages("skimr")
#install.packages("polycor")
#install.packages("corrplot")
#install.packages("patchwork")
#instlal.packages("ggpubr")
library(knitr)
library(summarytools)
library(psych)
library(polycor)
library(corrplot)
library(patchwork)
library(broom)
library(tidyverse)
library(ggpubr)
library(stringr)
COPINGpalette2 <- c("#78D9C5",
"#F5BE5E")
COPINGpalette3 <- c("#78D9C5",
"#F5BE5E",
"#EEB6E9")
COPINGpalette4 <- c("#78D9C5",
"#F5BE5E",
"#EEB6E9",
"#DBDB73")
COPINGpalette5 <- c("#78D9C5",
"#F5BE5E",
"#EEB6E9",
"#DBDB73",
"#FFED98")
COPINGpalette6 <- c("#78D9C5",
"#F5BE5E",
"#EEB6E9",
"#DBDB73",
"#FFED98",
"#BFD2EB")
COPINGpalette7 <- c("#78D9C5",
"#F5BE5E",
"#EEB6E9",
"#DBDB73",
"#FFED98",
"#BFD2EB",
"#808080")
COPINGpaletteGRAD <- c("#F5BE5E",
"#FFD284",
"#FFEED1",
"#B5B5B5",
"#DEFFF8",
"#94F6E1",
"#78D9C5")
COPINGNeuCenterpalette <- c("#78D9C5",
"#808080",
"#F5BE5E")
RAMPworseGRADpalette <- c("#78D9C5",
"#FFEED1",
"#F5BE5E",
"#FFB1B5")
GLADpalette = c("#efc00b",
"#b7dee8")
palette = COPINGpalette2
theme_personal <-  theme(
text = element_text(color = "black"),
axis.title = element_text(color = "black"),
axis.text = element_text(color = "black"),
axis.title.y = element_blank(),
legend.background = element_blank(),
legend.box.background = element_blank(),
panel.background = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_line(
colour = "gray",
linetype = "dashed",
size = 0.2
),
axis.ticks = element_blank()
)
#source data directory: data_path
source("../PANCHANGE_raw_path.R")
dat.raw <- readRDS(file = paste0(data_path, "four_cohorts_variables.rds"))
dim(dat.raw)
colnames(dat.raw)
sum_score_cols <- dat.raw %>%
select(contains("sum_score")) %>%
select(-ends_with("raw")) %>%
colnames()
sum_score_cols
phq.sum_score_cols <- dat.raw %>%
select(contains("phq")) %>%
select(contains("sum_score")) %>%
select(-ends_with("raw")) %>%
select(-contains("8items")) %>%
colnames()
phq.sum_score_cols
gad.sum_score_cols <- dat.raw %>%
select(contains("gad")) %>%
select(contains("sum_score")) %>%
select(-ends_with("raw")) %>%
colnames()
gad.sum_score_cols
ocir.sum_score_cols <- dat.raw %>%
select(contains("ocir")) %>%
select(contains("sum_score")) %>%
select(-ends_with("raw")) %>%
colnames()
ocir.sum_score_cols
pcl.sum_score_cols <- dat.raw %>%
select(contains("pcl")) %>%
select(contains("sum_score")) %>%
select(-ends_with("raw")) %>%
colnames()
pcl.sum_score_cols
diff_score_cols <- dat.raw %>%
select(contains("diff_score")) %>%
colnames()
diff_score_cols
phq.diff_score_cols <- dat.raw %>%
select(contains("phq")) %>%
select(contains("diff_score")) %>%
colnames()
phq.diff_score_cols
gad.diff_score_cols <- dat.raw %>%
select(contains("gad")) %>%
select(contains("diff_score")) %>%
colnames()
gad.diff_score_cols
ocir.diff_score_cols <- dat.raw %>%
select(contains("ocir")) %>%
select(contains("diff_score")) %>%
colnames()
ocir.diff_score_cols
dat <- dat.raw %>%
filter( # Participants should have responded to the mental health diagnosis (MHD) questionnaire
!is.na(depressive_disorders) &
!is.na(anxiety_disorders) &
!is.na(eating_disorders) &
!is.na(obsessive_compulsive_disorders) &
!is.na(psychotic_disorders) &
!is.na(mhd.mania_hypomania_bipolar_or_manicdepression) &
!is.na(mhd.posttraumatic_stress_disorder_ptsd) &
!is.na(autism_spectrum_disorder) &
!is.na(mhd.attention_deficit_hyperactivity_disorder) &
!is.na(mhd.personality_disorder) &
!is.na(control)
) %>%
filter(
!is.na(data_group_gad) & # Participants should have answered at least the GAD, the PHQ, or the PCL once
!is.na(data_group_phq) &
!is.na(data_group_pcl)
) %>%
drop_na(startDate.coping) %>% # Participant has answered the COPING/RAMP baseline questionnaire
drop_na(Gender_collapsed) %>% # Participant has self-reported their gender
drop_na(age_category_collapsed) # Participant has self-reported their age
dim(dat.raw)
dim(dat)
nrow(dat.raw)-nrow(dat)
dat.raw %>%
freq(
data_group_gad,
cumul = F)
dat.raw %>%
freq(
data_group_phq,
cumul = F)
dat.raw %>%
freq(
data_group_pcl,
cumul = F)
dat.raw %>%
freq(
data_group_ocir,
cumul = F)
dat %>%
freq(Sample)
dat %>%
freq(disorders_total_count)
#Ppts with least one psychiatric disorder
dat %>%
count(disorders_total_count >= 1)
#Ppts with anxiety OR depressive disorder
dat %>%
count(anxiety_disorders_numeric == 1 | depressive_disorders == 1)
#Ppts with anxiety & depression
dat %>%
count(depression_and_anxiety_numeric == 1)
#Visualise the gad summary scores for baseline and retro
head(dat$gad.sum_score_base, 30)
head(dat$gad.sum_score_retro, 30)
#Visualise the gad pandemic feelings variables
head(dat$gad.pandemic_felt_feelings, 10)
head(dat$gad.pandemic_felt_feelings_numeric, 10)
#Edit the gad sum retro score as follows: if the pt reports no different since pandemic and there is a missing value for their retro score, impute their baseline score, else if there isn't a missing value for their retro score, leave it as it is.
impute_dat <- dat %>%
mutate(gad.sum_score_retro =
case_when(gad.pandemic_felt_feelings == "No different" & is.na(gad.sum_score_retro)                      ~ gad.sum_score_base,
!is.na(gad.sum_score_retro) ~ gad.sum_score_retro))
#Check that the Na's have been replaced with duplicated baseline sum scores
head(impute_dat$gad.sum_score_base, 30)
head(impute_dat$gad.sum_score_retro, 30)
#Visualise the phq summary scores for baseline and retro
head(dat$phq.sum_score_base, 30)
head(dat$phq.sum_score_retro, 30)
#Visualise the phq pandemic feelings variables
head(dat$phq.pandemic_felt_feelings, 10)
head(dat$phq.pandemic_felt_feelings_numeric, 10)
#Edit the phq sum retro score as follows: if the pt reports no different since pandemic and there is a missing value for their retro score, impute their baseline score, else if there isn't a missing value for their retro score, leave it as it is.
impute_dat <- dat %>%
mutate(phq.sum_score_retro =
case_when(phq.pandemic_felt_feelings == "No different" & is.na(phq.sum_score_retro)                      ~ phq.sum_score_base,
!is.na(phq.sum_score_retro) ~ phq.sum_score_retro))
#Check that the Na's have been replaced with duplicated baseline sum scores
head(impute_dat$phq.sum_score_base, 30)
head(impute_dat$phq.sum_score_retro, 30)
#Visualise some dates when participants completed the questionnaire
head(dat$startDate.coping, 20)
#Divide the data by sign up per month and summarise the amount of pt's completing the survey that month
april_sign_up <- dat[str_detect(dat$startDate.coping, "-04-"), ] %>%
select(startDate.coping) %>%
summarise(April = n())
may_sign_up <- dat[str_detect(dat$startDate.coping, "-05-"), ] %>%
select(startDate.coping) %>%
summarise(May = n())
june_sign_up <- dat[str_detect(dat$startDate.coping, "-06-"), ] %>%
select(startDate.coping) %>%
summarise(June = n())
july_sign_up <- dat[str_detect(dat$startDate.coping, "-07-"), ] %>%
select(startDate.coping) %>%
summarise(July = n())
august_sign_up <- dat[str_detect(dat$startDate.coping, "-08-"), ] %>%
select(startDate.coping) %>%
summarise(August = n())
september_sign_up <- dat[str_detect(dat$startDate.coping, "-09-"), ] %>%
select(startDate.coping) %>%
summarise(September = n())
#Merge results into one tibble
coping_sign_up <- april_sign_up %>%
cbind(may_sign_up, june_sign_up, july_sign_up, august_sign_up, september_sign_up)
#Gather the variables
coping_sign_up <- coping_sign_up %>%
gather(key = "month", value = "sign_up_number")
#Proportion calculation
coping_sign_up <- coping_sign_up %>%
mutate(percentage =
round((sign_up_number / sum(sign_up_number) * 100), 2))
coping_sign_up
disorder_columns <- c(
"control_numeric",
"depressive_disorders_numeric",
"anxiety_disorders_numeric",
"mhd.posttraumatic_stress_disorder_ptsd_numeric",
"eating_disorders_numeric",
"obsessive_compulsive_disorders_numeric",
"mhd.attention_deficit_hyperactivity_disorder_numeric",
"mhd.personality_disorder_numeric",
"autism_spectrum_disorder_numeric",
"mhd.mania_hypomania_bipolar_or_manicdepression_numeric",
"psychotic_disorders_numeric"
)
# Select items for correlation matrix
mhd.items <- c(
"depressive_disorders",
"anxiety_disorders",
"eating_disorders",
"obsessive_compulsive_disorders",
"psychotic_disorders",
"mhd.mania_hypomania_bipolar_or_manicdepression",
"mhd.posttraumatic_stress_disorder_ptsd",
"autism_spectrum_disorder",
"mhd.attention_deficit_hyperactivity_disorder",
"mhd.personality_disorder",
"control"
)
# Calculate correlation matrix on specific columns (variables) from your data frame
mhd.corr.mat <- hetcor(
as.data.frame(dat[,mhd.items]), # Specify the data
use = "pairwise.complete.obs" # Use all pairwise observations
)
# Print the correlation matrix
print(mhd.corr.mat, digits = max(3, getOption("digits") - 3))
# Save the correlations from the correlation matrix in an object
mhd.corr.matrix <- as.matrix(mhd.corr.mat)
# Save the p values from the correlation matrix in an object
mhd.p.matrix <- as.matrix(mhd.corr.mat$tests)
corrplot(mhd.corr.matrix,
method = "color", # objects to represent the correlations on plot
type = "lower", # only use the lower triangle of the matrix
diag = FALSE, # do not show the correlations on the diagonal
addgrid.col = NA,
addCoef.col = "black", # colour for the correlation coefficients in the plot
tl.cex = 0.8,
tl.col = "black",
col=colorRampPalette(c("dodgerblue4","white","firebrick4"))(200), # colours for correlations
# Combine with significance
p.mat = mhd.p.matrix, # Matrix with p values
sig.level = 0.01, # Choose significant level
insig = "blank" # Nonsignificant correlations have no colour
)
cor.mtest <- function(mat, conf.level = 0.95){
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- lowCI.mat <- uppCI.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
diag(lowCI.mat) <- diag(uppCI.mat) <- 1
for(i in 1:(n-1)){
for(j in (i+1):n){
tmp <- cor.test(mat[,i], mat[,j], conf.level = conf.level)
p.mat[i,j] <- p.mat[j,i] <- tmp$p.value
lowCI.mat[i,j] <- lowCI.mat[j,i] <- tmp$conf.int[1]
uppCI.mat[i,j] <- uppCI.mat[j,i] <- tmp$conf.int[2]
}
}
return(list(p.mat, lowCI.mat, uppCI.mat))
}
# Select items for correlation matrix
prepan_retro_items <- c(
"gad.sum_score_prepan",
"gad.sum_score_retro",
"phq.sum_score_prepan",
"phq.sum_score_retro"
)
#Create a data set with only the GLAD and EDGI
prepan_retro_dat <- dat[str_detect(dat$Sample, "GLAD|EDGI"), ]
#Check that RAMP and NBR has been removed
prepan_retro_dat %>%
freq(Sample)
# Calculate correlation matrix on specific columns (variables) from your data frame
prepan_retro.corr.mat <- hetcor(
as.data.frame(prepan_retro_dat[,prepan_retro_items]), # Specify the data
use = "pairwise.complete.obs" # Use all pairwise observations
)
# Print the correlation matrix
print(prepan_retro.corr.mat, digits = max(3, getOption("digits") - 3))
# Save the correlations from the correlation matrix in an object
prepan_retro.corr.matrix <- as.matrix(prepan_retro.corr.mat)
# Save the p values from the correlation matrix in an object
prepan_retro.p.matrix <- as.matrix(prepan_retro.corr.mat$tests)
res1 <- cor.ci(prepan_retro.corr.matrix)
lowci <- cor.plot.upperLowerCi(res1)
lowci[upper.tri(lowci)] = t(lowci)[upper.tri(lowci)]
upci <- cor.plot.upperLowerCi(res1)
upci[lower.tri(upci)] = t(upci)[lower.tri(lowci)]
conf <- paste0("[", format(lowci, digits=2), ":", format(upci, digits=2), "]")
xs <- row(lowci)
ys <- (ncol(lowci)+1) - col(lowci)
xs[lower.tri(xs,diag=TRUE)] <- 0
ys[lower.tri(ys,diag=TRUE)] <- 0
corrplot(prepan_retro.corr.matrix,
method = "color", # objects to represent the correlations on plot
type = "lower", # only use the lower triangle of the matrix
diag = FALSE, # do not show the correlations on the diagonal
addgrid.col = NA,
addCoef.col = "black", # colour for the correlation coefficients in the plot
tl.cex = 0.8,
tl.col = "black",
col=colorRampPalette(c("dodgerblue4","white","firebrick4"))(200), # colours for correlations
# Combine with significance
p.mat = prepan_retro.p.matrix, # Matrix with p values
sig.level = 0.01, # Choose significant level
insig = "blank" # Nonsignificant correlations have no colour
)
text(xs, ys, conf, pos=1, cex=0.8)
# Select items for correlation matrix
prepan_retro_items <- c(
"gad.sum_score_prepan",
"gad.sum_score_retro",
"phq.sum_score_prepan",
"phq.sum_score_retro"
)
#Create a data set with only the GLAD and EDGI
prepan_retro_dat <- dat[str_detect(dat$Sample, "GLAD|EDGI"), ]
#Check that RAMP and NBR has been removed
prepan_retro_dat %>%
freq(Sample)
# Calculate correlation matrix on specific columns (variables) from your data frame
prepan_retro.corr.mat <- hetcor(
as.data.frame(prepan_retro_dat[,prepan_retro_items]), # Specify the data
use = "pairwise.complete.obs" # Use all pairwise observations
)
# Print the correlation matrix
print(prepan_retro.corr.mat, digits = max(3, getOption("digits") - 3))
# Save the correlations from the correlation matrix in an object
prepan_retro.corr.matrix <- as.matrix(prepan_retro.corr.mat)
# Save the p values from the correlation matrix in an object
prepan_retro.p.matrix <- as.matrix(prepan_retro.corr.mat$tests)
res1 <- cor.ci(prepan_retro.corr.matrix)
lowci <- cor.plot.upperLowerCi(res1)
lowci[upper.tri(lowci)] = t(lowci)[upper.tri(lowci)]
upci <- cor.plot.upperLowerCi(res1)
upci[lower.tri(upci)] = t(upci)[lower.tri(lowci)]
conf <- paste0("[", format(lowci, digits=2), " : ", format(upci, digits=2), "]")
xs <- row(lowci)
ys <- (ncol(lowci)+1) - col(lowci)
xs[lower.tri(xs,diag=TRUE)] <- 0
ys[lower.tri(ys,diag=TRUE)] <- 0
corrplot(prepan_retro.corr.matrix,
method = "color", # objects to represent the correlations on plot
type = "lower", # only use the lower triangle of the matrix
diag = FALSE, # do not show the correlations on the diagonal
addgrid.col = NA,
addCoef.col = "black", # colour for the correlation coefficients in the plot
tl.cex = 0.8,
tl.col = "black",
col=colorRampPalette(c("dodgerblue4","white","firebrick4"))(200), # colours for correlations
# Combine with significance
p.mat = prepan_retro.p.matrix, # Matrix with p values
sig.level = 0.01, # Choose significant level
insig = "blank" # Nonsignificant correlations have no colour
)
text(xs, ys, conf, pos=1, cex=0.8)
# Select items for correlation matrix
prepan_retro_items <- c(
"gad.sum_score_prepan",
"gad.sum_score_retro",
"phq.sum_score_prepan",
"phq.sum_score_retro"
)
#Create a data set with only the GLAD and EDGI
prepan_retro_dat <- dat[str_detect(dat$Sample, "GLAD|EDGI"), ]
#Check that RAMP and NBR has been removed
prepan_retro_dat %>%
freq(Sample)
# Calculate correlation matrix on specific columns (variables) from your data frame
prepan_retro.corr.mat <- hetcor(
as.data.frame(prepan_retro_dat[,prepan_retro_items]), # Specify the data
use = "pairwise.complete.obs" # Use all pairwise observations
)
# Print the correlation matrix
print(prepan_retro.corr.mat, digits = max(3, getOption("digits") - 3))
# Save the correlations from the correlation matrix in an object
prepan_retro.corr.matrix <- as.matrix(prepan_retro.corr.mat)
# Save the p values from the correlation matrix in an object
prepan_retro.p.matrix <- as.matrix(prepan_retro.corr.mat$tests)
res1 <- cor.ci(prepan_retro.corr.matrix)
lowci <- cor.plot.upperLowerCi(res1)
lowci[upper.tri(lowci)] = t(lowci)[upper.tri(lowci)]
upci <- cor.plot.upperLowerCi(res1)
upci[lower.tri(upci)] = t(upci)[lower.tri(lowci)]
conf <- paste0("[", format(lowci, digits=2), " - ", format(upci, digits=2), "]")
xs <- row(lowci)
ys <- (ncol(lowci)+1) - col(lowci)
xs[lower.tri(xs,diag=TRUE)] <- 0
ys[lower.tri(ys,diag=TRUE)] <- 0
corrplot(prepan_retro.corr.matrix,
method = "color", # objects to represent the correlations on plot
type = "lower", # only use the lower triangle of the matrix
diag = FALSE, # do not show the correlations on the diagonal
addgrid.col = NA,
addCoef.col = "black", # colour for the correlation coefficients in the plot
tl.cex = 0.8,
tl.col = "black",
col=colorRampPalette(c("dodgerblue4","white","firebrick4"))(200), # colours for correlations
# Combine with significance
p.mat = prepan_retro.p.matrix, # Matrix with p values
sig.level = 0.01, # Choose significant level
insig = "blank" # Nonsignificant correlations have no colour
)
text(xs, ys, conf, pos=1, cex=0.8)
#Filter by self-reported change since pandemic started
much_worse_gad <- dat %>%
filter(gad.pandemic_felt_feelings == "Much worse")
little_worse_gad <- dat %>%
filter(gad.pandemic_felt_feelings == "A little worse")
little_better_gad <- dat %>%
filter(gad.pandemic_felt_feelings == "A little better")
much_better_gad <- dat %>%
filter(gad.pandemic_felt_feelings == "Much better")
#Visualise each as a scatterplot
much_worse_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +
geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4) +
labs(title = paste("Relationship between prepandemc and retrospective GAD scores\nfor participants reporting much worse",
sep=" "),
subtitle = paste("n", dim(much_worse_gad)[1]))
little_worse_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +
geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4) +
labs(title = paste("Relationship between prepandemc and retrospective GAD scores\nfor participants reporting a little worse",
sep=" "),
subtitle = paste("n", dim(little_worse_gad)[1]))
little_better_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +
geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4) +
labs(title = paste("Relationship between prepandemc and retrospective GAD scores\nfor participants reporting a little better",
sep=" "),
subtitle = paste("n", dim(little_better_gad)[1]))
much_better_gad %>% ggplot(aes(x = gad.sum_score_prepan, y = gad.sum_score_retro)) +
geom_point(colour = "blue") +
stat_smooth(method = "lm") +
geom_jitter(w = 0.4, h = 0.4) +
labs(title = paste("Relationship between prepandemc and retrospective GAD scores\nfor participants reporting a little worse",
sep=" "),
subtitle = paste("n", dim(much_better_gad)[1]))
